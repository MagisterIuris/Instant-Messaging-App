/*
 * Buzzchat CPOO Server API
 * This is a prototype of CPOO's BuzzChat front/back API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: aymane.menfaa@insa-rennes.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import okhttp3.*;
import org.apache.http.HttpStatus;
import org.junit.Before;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddConversationRequest;
import org.openapitools.client.model.ConversationDisplayDTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.openapitools.client.model.UserCredentialsDTO;

import java.io.IOException;
import java.util.*;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * API tests for ConversationApi
 */

public class ConversationApiTest {

  private final ConversationApi api = new ConversationApi();
  private final AuthenticationApi apiAuth = new AuthenticationApi();
  private MonCookieJar MonCookie;

  private UserCredentialsDTO user1 = new UserCredentialsDTO()
    .login("aymane")
    .password("pwd")
    .email("aymane@buzzchat.com")
    .dateDeNaissance("26/02/2002")
    .prenom("Aymane")
    .nom("Menfaa")
    .photo("assets/photo.png");

  private UserCredentialsDTO user2 = new UserCredentialsDTO()
    .login("hamza")
    .password("pwd")
    .email("hamza@buzzchat.com")
    .dateDeNaissance("26/02/2002")
    .prenom("Hamza")
    .nom("Azer")
    .photo("assets/photo.png");


  @BeforeEach
  public void init () {
    MonCookie = new MonCookieJar();

    // Simulate the behavior of a web browser by remembering cookies set by the server
    OkHttpClient.Builder builder = new OkHttpClient.Builder();
    OkHttpClient okHttpClient = builder.cookieJar(MonCookie).build();
    ApiClient apiClient = new ApiClient(okHttpClient);
    apiAuth.setApiClient(apiClient);
    api.setApiClient(apiClient);


  }




  @Test
  public void addConversationTest() throws ApiException {
    apiAuth.signin(user1);
    OkHttpClient client = new OkHttpClient.Builder()
      .cookieJar(MonCookie)
      .build();
    MediaType mediaType = MediaType.parse("application/json; charset=utf-8");

    JsonArray loginsArray = new JsonArray();
    loginsArray.add(user1.getLogin());
    loginsArray.add(user2.getLogin());


    String jsonRequestBody = loginsArray.toString();


    Request request = new Request.Builder()
      .url("http://localhost:8080/conversation/addConversation")
      .post(RequestBody.create(mediaType, jsonRequestBody))
      .build();

    JsonObject jsonResponse = null;
    try {
      Response response = client.newCall(request).execute();
      String responseBody = response.body().string();
      jsonResponse = JsonParser.parseString(responseBody).getAsJsonObject();


    } catch (IOException e) {
      e.printStackTrace();
    }

    System.out.println(jsonResponse);

    ConversationDisplayDTO dto = new ConversationDisplayDTO();
    List<String> usernamesList = new ArrayList<>();
    if (jsonResponse != null && jsonResponse.has("usernames")) {
      JsonArray usernamesArray = jsonResponse.getAsJsonArray("usernames");


      for (JsonElement element : usernamesArray) {
        usernamesList.add(element.getAsString());
      }
    }


    dto.setUsernames(usernamesList);
    apiAuth.signout();

    assertEquals(1, dto.getUsernames().size());
  }




  @Test
  public void getAllConversationsOfUserTest() throws ApiException {
    apiAuth.signin(user1);
    try {
      List<ConversationDisplayDTO> response = api.getAllConversationsOfUser();
      Assertions.fail();
    }catch(ApiException e){
      Assertions.assertEquals(HttpStatus.SC_UNAUTHORIZED, e.getCode());
    }
    apiAuth.signout();
    // TODO: test validations
  }

}
