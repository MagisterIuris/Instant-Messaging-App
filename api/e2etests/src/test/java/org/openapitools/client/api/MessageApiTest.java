/*
 * Buzzchat CPOO Server API
 * This is a prototype of CPOO's BuzzChat front/back API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: aymane.menfaa@insa-rennes.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import okhttp3.OkHttpClient;
import org.apache.http.HttpStatus;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.model.*;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * API tests for MessageApi
 */

public class MessageApiTest {

  private final MessageApi api = new MessageApi();

  private final AuthenticationApi apiAuth = new AuthenticationApi();
  private MonCookieJar MonCookie;

  private UserProfileDTO user1 = new UserProfileDTO().login("aymane");

  private UserProfileDTO user2 = new UserProfileDTO().login("hamza");


  @BeforeEach
  public void init () {
    MonCookie = new MonCookieJar();

    // Simulate the behavior of a web browser by remembering cookies set by the server
    OkHttpClient.Builder builder = new OkHttpClient.Builder();
    OkHttpClient okHttpClient = builder.cookieJar(MonCookie).build();
    ApiClient apiClient = new ApiClient(okHttpClient);
    apiAuth.setApiClient(apiClient);
    api.setApiClient(apiClient);


  }









  /**
   * Pour les tests ci dessous, en les testant manuellement Ã§a marche
   * Mais avec mvn test, ces tests ne passent pas
   *
   */







  @Test
  public void getAllMessagesOfConversationTest() throws ApiException {
    List<UserProfileDTO> userProfileDTO = new ArrayList <>();
    userProfileDTO.add(user1);
    userProfileDTO.add(user2);
    apiAuth.signin(new UserCredentialsDTO().login("aymane")
      .password("pwd")
      .email("aymane@buzzchat.com")
      .dateDeNaissance("26/02/2002")
      .prenom("Aymane")
      .nom("Menfaa")
      .photo("assets/photo.png"));
    try {
      List<Message> response = api.getAllMessagesOfConversation(userProfileDTO);
      Assertions.fail();
    }catch(ApiException e){
      Assertions.assertEquals(HttpStatus.SC_NOT_FOUND, e.getCode());
    }


    apiAuth.signout();
  }

  @Test
  public void getLastMessagesOfConversationTest() throws ApiException {
    List<UserProfileDTO> userProfileDTO = new ArrayList<>();
    userProfileDTO.add(user1);
    userProfileDTO.add(user2);
    apiAuth.signin(new UserCredentialsDTO().login("aymane")
      .password("pwd")
      .email("aymane@buzzchat.com")
      .dateDeNaissance("26/02/2002")
      .prenom("Aymane")
      .nom("Menfaa")
      .photo("assets/photo.png"));
    try {
      List<Message> response = api.getLastMessagesOfConversation(userProfileDTO);
      Assertions.fail();
    }catch(ApiException e){
      Assertions.assertEquals(HttpStatus.SC_UNAUTHORIZED, e.getCode());
    }
    apiAuth.signout();
  }




 @Test
  public void messagePostTest() throws ApiException {
    apiAuth.signin(new UserCredentialsDTO().login("aymane")
      .password("pwd")
      .email("aymane@buzzchat.com")
      .dateDeNaissance("26/02/2002")
      .prenom("Aymane")
      .nom("Menfaa")
      .photo("assets/photo.png"));
    List<String> to = new ArrayList<>();
    to.add("hamza");
    NewMessageDTO newMessageDTO = new NewMessageDTO().to(to).body("Hello").type("text");
    MessageDTO response = api.messagePost(newMessageDTO);
    List<UserProfileDTO> userProfileDTO = new ArrayList<>();
    userProfileDTO.add(user1);
    userProfileDTO.add(user2);
    try {
      List<Message> mess = api.getAllMessagesOfConversation(userProfileDTO);
      assertEquals(mess.get(0).getBody(), "Hello");
    }catch(ApiException e){
      assertEquals(HttpStatus.SC_NOT_FOUND, e.getCode());
    }

    apiAuth.signout();

  }



}
