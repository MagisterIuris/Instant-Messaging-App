{"ast":null,"code":"var _class;\nimport { EventEmitter } from '@angular/core';\nimport { Conversation2 } from '../Conversation2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/ConvService\";\nimport * as i2 from \"../theme.service\";\nimport * as i3 from \"../services/MessageService\";\nimport * as i4 from \"@angular/material/dialog\";\nimport * as i5 from \"../services/ConversationService\";\nimport * as i6 from \"../services/MessConvService\";\nimport * as i7 from \"../services/GetMessageService\";\nimport * as i8 from \"@angular/forms\";\nexport class MyDialogComponent {\n  constructor(convService, themeService, messageService, dialog, conversationService, messConvService, getMessageService, dialogRef) {\n    this.convService = convService;\n    this.themeService = themeService;\n    this.messageService = messageService;\n    this.dialog = dialog;\n    this.conversationService = conversationService;\n    this.messConvService = messConvService;\n    this.getMessageService = getMessageService;\n    this.dialogRef = dialogRef;\n    this.conversationAdded = new EventEmitter();\n    this.messages = [];\n    this.user1 = '';\n    this.user2 = '';\n  }\n  addConversationButton() {\n    const userData = [this.user1, this.user2];\n    this.convService.addConversation(userData).subscribe(response => {\n      // Gérez la réponse du backend ici, par exemple, mettez à jour votre interface utilisateur\n      console.log('Réponse du backend :', response);\n      // Créez une nouvelle instance de Conversation2 et copiez les propriétés pertinentes de la réponse\n      const newConversation = new Conversation2();\n      newConversation.id = response.id;\n      newConversation.from = response.from;\n      newConversation.usernames = response.usernames;\n      newConversation.pictures = response.pictures;\n      newConversation.lastMessage = response.lastMessage;\n      newConversation.timestamp = response.timestamp;\n      this.conversationService.addConversation(newConversation);\n      this.conversationAdded.emit();\n    });\n  }\n  confirmAdd() {\n    this.dialogRef.close('delete');\n  }\n}\n_class = MyDialogComponent;\n_class.ɵfac = function MyDialogComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.ConvService), i0.ɵɵdirectiveInject(i2.ThemeService), i0.ɵɵdirectiveInject(i3.MessageService), i0.ɵɵdirectiveInject(i4.MatDialog), i0.ɵɵdirectiveInject(i5.ConversationService), i0.ɵɵdirectiveInject(i6.MessConvService), i0.ɵɵdirectiveInject(i7.GetMessageService), i0.ɵɵdirectiveInject(i4.MatDialogRef));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-my-dialog\"]],\n  outputs: {\n    conversationAdded: \"conversationAdded\"\n  },\n  decls: 9,\n  vars: 2,\n  consts: [[1, \"custom-dialog-container\"], [1, \"custom-dialog-title\"], [1, \"input-container\"], [\"type\", \"text\", \"placeholder\", \"Votre username\", 1, \"custom-dialog-input\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"text\", \"placeholder\", \"Username du destinataire\", 1, \"custom-dialog-input\", 3, \"ngModel\", \"ngModelChange\"], [1, \"custom-dialog-button\", 3, \"click\"]],\n  template: function MyDialogComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\", 1);\n      i0.ɵɵtext(2, \"Cr\\u00E9er une conversation\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 2)(4, \"input\", 3);\n      i0.ɵɵlistener(\"ngModelChange\", function MyDialogComponent_Template_input_ngModelChange_4_listener($event) {\n        return ctx.user1 = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"div\", 2)(6, \"input\", 4);\n      i0.ɵɵlistener(\"ngModelChange\", function MyDialogComponent_Template_input_ngModelChange_6_listener($event) {\n        return ctx.user2 = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(7, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function MyDialogComponent_Template_button_click_7_listener() {\n        return ctx.addConversationButton();\n      })(\"click\", function MyDialogComponent_Template_button_click_7_listener() {\n        return ctx.confirmAdd();\n      });\n      i0.ɵɵtext(8, \"Ajouter une conversation\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.user1);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngModel\", ctx.user2);\n    }\n  },\n  dependencies: [i8.DefaultValueAccessor, i8.NgControlStatus, i8.NgModel],\n  styles: [\".custom-dialog-container[_ngcontent-%COMP%] {\\ndisplay: flex;\\nflex-direction: column;\\nalign-items: center;\\njustify-content: center;\\nbackground-color: #FBCE83;\\npadding: 20px;\\n}\\n\\n.custom-dialog-title[_ngcontent-%COMP%] {\\nfont-weight: bold;\\nfont-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\\nfont-size: 24px;\\nmargin-bottom: 20px;\\n}\\n\\n.input-container[_ngcontent-%COMP%] {\\ndisplay: flex;\\nflex-direction: column;\\nalign-items: center;\\nwidth: 100%;\\nmargin-bottom: 20px;\\n}\\n\\n.custom-dialog-input[_ngcontent-%COMP%] {\\nborder: 3px solid #fabe57; \\n\\nborder-radius: 10px; \\n\\npadding: 10px;\\nfont-size: 15px;\\nwidth: 70%;\\nmargin-bottom: 10px;\\noutline: none;\\n}\\n\\n.custom-dialog-button[_ngcontent-%COMP%] {\\nbackground-color: #fabe57;\\ncolor: #fff;\\nborder: none;\\nborder-radius: 4px;\\ncursor: pointer;\\npadding: 10px 20px;\\nfont-size: 16px;\\n}\\n\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbXktZGlhbG9nL215LWRpYWxvZy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsYUFBYTtBQUNiLHNCQUFzQjtBQUN0QixtQkFBbUI7QUFDbkIsdUJBQXVCO0FBQ3ZCLHlCQUF5QjtBQUN6QixhQUFhO0FBQ2I7O0FBRUE7QUFDQSxpQkFBaUI7QUFDakIsNkVBQTZFO0FBQzdFLGVBQWU7QUFDZixtQkFBbUI7QUFDbkI7O0FBRUE7QUFDQSxhQUFhO0FBQ2Isc0JBQXNCO0FBQ3RCLG1CQUFtQjtBQUNuQixXQUFXO0FBQ1gsbUJBQW1CO0FBQ25COztBQUVBO0FBQ0EseUJBQXlCLEVBQUUsOEJBQThCO0FBQ3pELG1CQUFtQixFQUFFLG1CQUFtQjtBQUN4QyxhQUFhO0FBQ2IsZUFBZTtBQUNmLFVBQVU7QUFDVixtQkFBbUI7QUFDbkIsYUFBYTtBQUNiOztBQUVBO0FBQ0EseUJBQXlCO0FBQ3pCLFdBQVc7QUFDWCxZQUFZO0FBQ1osa0JBQWtCO0FBQ2xCLGVBQWU7QUFDZixrQkFBa0I7QUFDbEIsZUFBZTtBQUNmIiwic291cmNlc0NvbnRlbnQiOlsiLmN1c3RvbS1kaWFsb2ctY29udGFpbmVyIHtcbmRpc3BsYXk6IGZsZXg7XG5mbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuYWxpZ24taXRlbXM6IGNlbnRlcjtcbmp1c3RpZnktY29udGVudDogY2VudGVyO1xuYmFja2dyb3VuZC1jb2xvcjogI0ZCQ0U4MztcbnBhZGRpbmc6IDIwcHg7XG59XG5cbi5jdXN0b20tZGlhbG9nLXRpdGxlIHtcbmZvbnQtd2VpZ2h0OiBib2xkO1xuZm9udC1mYW1pbHk6ICdHaWxsIFNhbnMnLCAnR2lsbCBTYW5zIE1UJywgQ2FsaWJyaSwgJ1RyZWJ1Y2hldCBNUycsIHNhbnMtc2VyaWY7XG5mb250LXNpemU6IDI0cHg7XG5tYXJnaW4tYm90dG9tOiAyMHB4O1xufVxuXG4uaW5wdXQtY29udGFpbmVyIHtcbmRpc3BsYXk6IGZsZXg7XG5mbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuYWxpZ24taXRlbXM6IGNlbnRlcjtcbndpZHRoOiAxMDAlO1xubWFyZ2luLWJvdHRvbTogMjBweDtcbn1cblxuLmN1c3RvbS1kaWFsb2ctaW5wdXQge1xuYm9yZGVyOiAzcHggc29saWQgI2ZhYmU1NzsgLyogQm9yZHVyZSBhdXRvdXIgZGUgbCdpbnB1dCAqL1xuYm9yZGVyLXJhZGl1czogMTBweDsgLyogQ29pbnMgYXJyb25kaXMgKi9cbnBhZGRpbmc6IDEwcHg7XG5mb250LXNpemU6IDE1cHg7XG53aWR0aDogNzAlO1xubWFyZ2luLWJvdHRvbTogMTBweDtcbm91dGxpbmU6IG5vbmU7XG59XG5cbi5jdXN0b20tZGlhbG9nLWJ1dHRvbiB7XG5iYWNrZ3JvdW5kLWNvbG9yOiAjZmFiZTU3O1xuY29sb3I6ICNmZmY7XG5ib3JkZXI6IG5vbmU7XG5ib3JkZXItcmFkaXVzOiA0cHg7XG5jdXJzb3I6IHBvaW50ZXI7XG5wYWRkaW5nOiAxMHB4IDIwcHg7XG5mb250LXNpemU6IDE2cHg7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"names":["EventEmitter","Conversation2","MyDialogComponent","constructor","convService","themeService","messageService","dialog","conversationService","messConvService","getMessageService","dialogRef","conversationAdded","messages","user1","user2","addConversationButton","userData","addConversation","subscribe","response","console","log","newConversation","id","from","usernames","pictures","lastMessage","timestamp","emit","confirmAdd","close","i0","ɵɵdirectiveInject","i1","ConvService","i2","ThemeService","i3","MessageService","i4","MatDialog","i5","ConversationService","i6","MessConvService","i7","GetMessageService","MatDialogRef","selectors","outputs","decls","vars","consts","template","MyDialogComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","MyDialogComponent_Template_input_ngModelChange_4_listener","$event","MyDialogComponent_Template_input_ngModelChange_6_listener","MyDialogComponent_Template_button_click_7_listener","ɵɵadvance","ɵɵproperty"],"sources":["/home/aymenf/dossier-a-push/cpoo-menfaa-doaif/client/src/app/my-dialog/my-dialog.component.ts","/home/aymenf/dossier-a-push/cpoo-menfaa-doaif/client/src/app/my-dialog/my-dialog.component.html"],"sourcesContent":["import { Component, EventEmitter, Output } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { Conversation2 } from '../Conversation2';\nimport { MessageDTO } from '../MessageDTO';\nimport { ConvService } from '../services/ConvService';\nimport { ConversationService } from '../services/ConversationService';\nimport { GetMessageService } from '../services/GetMessageService';\nimport { MessConvService } from '../services/MessConvService';\nimport { MessageService } from '../services/MessageService';\nimport { ThemeService } from '../theme.service';\n\n@Component({\n  selector: 'app-my-dialog',\n  templateUrl: './my-dialog.component.html',\n  styleUrls: ['./my-dialog.component.css']\n})\nexport class MyDialogComponent {\n  @Output() conversationAdded = new EventEmitter<void>()\n  user1!:string;\n  user2!:string;\n  messages: MessageDTO[] = [];\n\n  constructor( private convService: ConvService,public themeService: ThemeService, private messageService: MessageService, public dialog:MatDialog,\n              private conversationService:ConversationService, private messConvService:MessConvService, public getMessageService:GetMessageService,\n              public dialogRef:MatDialogRef<MyDialogComponent>){\n    this.user1='';\n    this.user2='';\n  }\n\n  \n\naddConversationButton(){\n  const userData = [this.user1, this.user2];\n  this.convService.addConversation(userData).subscribe((response: any) => {\n    // Gérez la réponse du backend ici, par exemple, mettez à jour votre interface utilisateur\n    console.log('Réponse du backend :', response);\n  \n    // Créez une nouvelle instance de Conversation2 et copiez les propriétés pertinentes de la réponse\n    const newConversation = new Conversation2();\n    newConversation.id=response.id;\n    newConversation.from=response.from;\n    newConversation.usernames = response.usernames;\n    newConversation.pictures = response.pictures;\n    newConversation.lastMessage = response.lastMessage;\n    newConversation.timestamp = response.timestamp;\n    this.conversationService.addConversation(newConversation);\n    this.conversationAdded.emit();\n  });\n  \n}\n\nconfirmAdd(): void {\n  this.dialogRef.close('delete');\n}\n\n}\n","<div class=\"custom-dialog-container\">\n  <h1 class=\"custom-dialog-title\">Créer une conversation</h1>\n  <div class=\"input-container\">\n    <input class=\"custom-dialog-input\" type=\"text\" placeholder=\"Votre username\" [(ngModel)]=\"user1\">\n  </div>\n  <div class=\"input-container\">\n    <input class=\"custom-dialog-input\" type=\"text\" placeholder=\"Username du destinataire\" [(ngModel)]=\"user2\">\n  </div>\n  <button (click)=\"addConversationButton()\" (click)=\"confirmAdd()\" class=\"custom-dialog-button\">Ajouter une conversation</button>\n</div>\n"],"mappings":";AAAA,SAAoBA,YAAY,QAAgB,eAAe;AAE/D,SAASC,aAAa,QAAQ,kBAAkB;;;;;;;;;;AAchD,OAAM,MAAOC,iBAAiB;EAM5BC,YAAqBC,WAAwB,EAAQC,YAA0B,EAAUC,cAA8B,EAASC,MAAgB,EAC5HC,mBAAuC,EAAUC,eAA+B,EAASC,iBAAmC,EAC7HC,SAAyC;IAFvC,KAAAP,WAAW,GAAXA,WAAW;IAAqB,KAAAC,YAAY,GAAZA,YAAY;IAAwB,KAAAC,cAAc,GAAdA,cAAc;IAAyB,KAAAC,MAAM,GAANA,MAAM;IAClH,KAAAC,mBAAmB,GAAnBA,mBAAmB;IAA8B,KAAAC,eAAe,GAAfA,eAAe;IAAyB,KAAAC,iBAAiB,GAAjBA,iBAAiB;IAC3G,KAAAC,SAAS,GAATA,SAAS;IAPlB,KAAAC,iBAAiB,GAAG,IAAIZ,YAAY,EAAQ;IAGtD,KAAAa,QAAQ,GAAiB,EAAE;IAKzB,IAAI,CAACC,KAAK,GAAC,EAAE;IACb,IAAI,CAACC,KAAK,GAAC,EAAE;EACf;EAIFC,qBAAqBA,CAAA;IACnB,MAAMC,QAAQ,GAAG,CAAC,IAAI,CAACH,KAAK,EAAE,IAAI,CAACC,KAAK,CAAC;IACzC,IAAI,CAACX,WAAW,CAACc,eAAe,CAACD,QAAQ,CAAC,CAACE,SAAS,CAAEC,QAAa,IAAI;MACrE;MACAC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEF,QAAQ,CAAC;MAE7C;MACA,MAAMG,eAAe,GAAG,IAAItB,aAAa,EAAE;MAC3CsB,eAAe,CAACC,EAAE,GAACJ,QAAQ,CAACI,EAAE;MAC9BD,eAAe,CAACE,IAAI,GAACL,QAAQ,CAACK,IAAI;MAClCF,eAAe,CAACG,SAAS,GAAGN,QAAQ,CAACM,SAAS;MAC9CH,eAAe,CAACI,QAAQ,GAAGP,QAAQ,CAACO,QAAQ;MAC5CJ,eAAe,CAACK,WAAW,GAAGR,QAAQ,CAACQ,WAAW;MAClDL,eAAe,CAACM,SAAS,GAAGT,QAAQ,CAACS,SAAS;MAC9C,IAAI,CAACrB,mBAAmB,CAACU,eAAe,CAACK,eAAe,CAAC;MACzD,IAAI,CAACX,iBAAiB,CAACkB,IAAI,EAAE;IAC/B,CAAC,CAAC;EAEJ;EAEAC,UAAUA,CAAA;IACR,IAAI,CAACpB,SAAS,CAACqB,KAAK,CAAC,QAAQ,CAAC;EAChC;;SArCa9B,iBAAiB;;mBAAjBA,MAAiB,EAAA+B,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,YAAA,GAAAL,EAAA,CAAAC,iBAAA,CAAAK,EAAA,CAAAC,cAAA,GAAAP,EAAA,CAAAC,iBAAA,CAAAO,EAAA,CAAAC,SAAA,GAAAT,EAAA,CAAAC,iBAAA,CAAAS,EAAA,CAAAC,mBAAA,GAAAX,EAAA,CAAAC,iBAAA,CAAAW,EAAA,CAAAC,eAAA,GAAAb,EAAA,CAAAC,iBAAA,CAAAa,EAAA,CAAAC,iBAAA,GAAAf,EAAA,CAAAC,iBAAA,CAAAO,EAAA,CAAAQ,YAAA;AAAA;;QAAjB/C,MAAiB;EAAAgD,SAAA;EAAAC,OAAA;IAAAvC,iBAAA;EAAA;EAAAwC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,2BAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MChB9BxB,EAAA,CAAA0B,cAAA,aAAqC;MACH1B,EAAA,CAAA2B,MAAA,kCAAsB;MAAA3B,EAAA,CAAA4B,YAAA,EAAK;MAC3D5B,EAAA,CAAA0B,cAAA,aAA6B;MACiD1B,EAAA,CAAA6B,UAAA,2BAAAC,0DAAAC,MAAA;QAAA,OAAAN,GAAA,CAAA5C,KAAA,GAAAkD,MAAA;MAAA,EAAmB;MAA/F/B,EAAA,CAAA4B,YAAA,EAAgG;MAElG5B,EAAA,CAAA0B,cAAA,aAA6B;MAC2D1B,EAAA,CAAA6B,UAAA,2BAAAG,0DAAAD,MAAA;QAAA,OAAAN,GAAA,CAAA3C,KAAA,GAAAiD,MAAA;MAAA,EAAmB;MAAzG/B,EAAA,CAAA4B,YAAA,EAA0G;MAE5G5B,EAAA,CAAA0B,cAAA,gBAA8F;MAAtF1B,EAAA,CAAA6B,UAAA,mBAAAI,mDAAA;QAAA,OAASR,GAAA,CAAA1C,qBAAA,EAAuB;MAAA,EAAC,mBAAAkD,mDAAA;QAAA,OAAUR,GAAA,CAAA3B,UAAA,EAAY;MAAA,EAAtB;MAAqDE,EAAA,CAAA2B,MAAA,+BAAwB;MAAA3B,EAAA,CAAA4B,YAAA,EAAS;;;MALjD5B,EAAA,CAAAkC,SAAA,GAAmB;MAAnBlC,EAAA,CAAAmC,UAAA,YAAAV,GAAA,CAAA5C,KAAA,CAAmB;MAGTmB,EAAA,CAAAkC,SAAA,GAAmB;MAAnBlC,EAAA,CAAAmC,UAAA,YAAAV,GAAA,CAAA3C,KAAA,CAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}