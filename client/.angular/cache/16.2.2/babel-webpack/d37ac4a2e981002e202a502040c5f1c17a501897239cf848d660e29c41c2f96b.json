{"ast":null,"code":"var _class, _class2, _class3, _class4, _class5, _class6, _class7, _class8, _class9;\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, Optional, Inject, ViewEncapsulation, ChangeDetectionStrategy, InjectionToken, Injectable, ANIMATION_MODULE_TYPE as ANIMATION_MODULE_TYPE$1, SkipSelf, Directive, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { CdkDialogContainer, Dialog, DialogConfig, DialogModule } from '@angular/cdk/dialog';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport * as i4 from '@angular/cdk/portal';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { Subject, merge, defer } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { MatCommonModule } from '@angular/material/core';\nimport { trigger, state, style, transition, group, animate, query, animateChild } from '@angular/animations';\n\n/**\r\n * Configuration for opening a modal dialog with the MatDialog service.\r\n */\nfunction _class2_ng_template_2_Template(rf, ctx) {}\nclass MatDialogConfig {\n  constructor() {\n    /** The ARIA role of the dialog element. */\n    this.role = 'dialog';\n    /** Custom class for the overlay pane. */\n    this.panelClass = '';\n    /** Whether the dialog has a backdrop. */\n    this.hasBackdrop = true;\n    /** Custom class for the backdrop. */\n    this.backdropClass = '';\n    /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n    this.disableClose = false;\n    /** Width of the dialog. */\n    this.width = '';\n    /** Height of the dialog. */\n    this.height = '';\n    /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n    this.maxWidth = '80vw';\n    /** Data being injected into the child component. */\n    this.data = null;\n    /** ID of the element that describes the dialog. */\n    this.ariaDescribedBy = null;\n    /** ID of the element that labels the dialog. */\n    this.ariaLabelledBy = null;\n    /** Aria label to assign to the dialog element. */\n    this.ariaLabel = null;\n    /** Whether this is a modal dialog. Used to set the `aria-modal` attribute. */\n    this.ariaModal = true;\n    /**\r\n     * Where the dialog should focus on open.\r\n     * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\r\n     * AutoFocusTarget instead.\r\n     */\n    this.autoFocus = 'first-tabbable';\n    /**\r\n     * Whether the dialog should restore focus to the\r\n     * previously-focused element, after it's closed.\r\n     */\n    this.restoreFocus = true;\n    /** Whether to wait for the opening animation to finish before trapping focus. */\n    this.delayFocusTrap = true;\n    /**\r\n     * Whether the dialog should close when the user goes backwards/forwards in history.\r\n     * Note that this usually doesn't include clicking on links (unless the user is using\r\n     * the `HashLocationStrategy`).\r\n     */\n    this.closeOnNavigation = true;\n    // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n  }\n}\n\n/** Class added when the dialog is open. */\nconst OPEN_CLASS = 'mdc-dialog--open';\n/** Class added while the dialog is opening. */\nconst OPENING_CLASS = 'mdc-dialog--opening';\n/** Class added while the dialog is closing. */\nconst CLOSING_CLASS = 'mdc-dialog--closing';\n/** Duration of the opening animation in milliseconds. */\nconst OPEN_ANIMATION_DURATION = 150;\n/** Duration of the closing animation in milliseconds. */\nconst CLOSE_ANIMATION_DURATION = 75;\n/**\r\n * Base class for the `MatDialogContainer`. The base class does not implement\r\n * animations as these are left to implementers of the dialog container.\r\n */\n// tslint:disable-next-line:validate-decorators\nclass _MatDialogContainerBase extends CdkDialogContainer {\n  constructor(elementRef, focusTrapFactory, _document, dialogConfig, interactivityChecker, ngZone, overlayRef, focusMonitor) {\n    super(elementRef, focusTrapFactory, _document, dialogConfig, interactivityChecker, ngZone, overlayRef, focusMonitor);\n    /** Emits when an animation state changes. */\n    this._animationStateChanged = new EventEmitter();\n  }\n  _captureInitialFocus() {\n    if (!this._config.delayFocusTrap) {\n      this._trapFocus();\n    }\n  }\n  /**\r\n   * Callback for when the open dialog animation has finished. Intended to\r\n   * be called by sub-classes that use different animation implementations.\r\n   */\n  _openAnimationDone(totalTime) {\n    if (this._config.delayFocusTrap) {\n      this._trapFocus();\n    }\n    this._animationStateChanged.next({\n      state: 'opened',\n      totalTime\n    });\n  }\n}\n_class = _MatDialogContainerBase;\n_class.ɵfac = function _class_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.FocusTrapFactory), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(MatDialogConfig), i0.ɵɵdirectiveInject(i1.InteractivityChecker), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1$1.OverlayRef), i0.ɵɵdirectiveInject(i1.FocusMonitor));\n};\n_class.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"ng-component\"]],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 0,\n  vars: 0,\n  template: function _class_Template(rf, ctx) {},\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatDialogContainerBase, [{\n    type: Component,\n    args: [{\n      template: ''\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.FocusTrapFactory\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: MatDialogConfig\n    }, {\n      type: i1.InteractivityChecker\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i1$1.OverlayRef\n    }, {\n      type: i1.FocusMonitor\n    }];\n  }, null);\n})();\nconst TRANSITION_DURATION_PROPERTY = '--mat-dialog-transition-duration';\n// TODO(mmalerba): Remove this function after animation durations are required\n//  to be numbers.\n/**\r\n * Converts a CSS time string to a number in ms. If the given time is already a\r\n * number, it is assumed to be in ms.\r\n */\nfunction parseCssTime(time) {\n  if (time == null) {\n    return null;\n  }\n  if (typeof time === 'number') {\n    return time;\n  }\n  if (time.endsWith('ms')) {\n    return coerceNumberProperty(time.substring(0, time.length - 2));\n  }\n  if (time.endsWith('s')) {\n    return coerceNumberProperty(time.substring(0, time.length - 1)) * 1000;\n  }\n  if (time === '0') {\n    return 0;\n  }\n  return null; // anything else is invalid.\n}\n/**\r\n * Internal component that wraps user-provided dialog content in a MDC dialog.\r\n * @docs-private\r\n */\nclass MatDialogContainer extends _MatDialogContainerBase {\n  constructor(elementRef, focusTrapFactory, document, dialogConfig, checker, ngZone, overlayRef, _animationMode, focusMonitor) {\n    super(elementRef, focusTrapFactory, document, dialogConfig, checker, ngZone, overlayRef, focusMonitor);\n    this._animationMode = _animationMode;\n    /** Whether animations are enabled. */\n    this._animationsEnabled = this._animationMode !== 'NoopAnimations';\n    /** Host element of the dialog container component. */\n    this._hostElement = this._elementRef.nativeElement;\n    /** Duration of the dialog open animation. */\n    this._enterAnimationDuration = this._animationsEnabled ? parseCssTime(this._config.enterAnimationDuration) ?? OPEN_ANIMATION_DURATION : 0;\n    /** Duration of the dialog close animation. */\n    this._exitAnimationDuration = this._animationsEnabled ? parseCssTime(this._config.exitAnimationDuration) ?? CLOSE_ANIMATION_DURATION : 0;\n    /** Current timer for dialog animations. */\n    this._animationTimer = null;\n    /**\r\n     * Completes the dialog open by clearing potential animation classes, trapping\r\n     * focus and emitting an opened event.\r\n     */\n    this._finishDialogOpen = () => {\n      this._clearAnimationClasses();\n      this._openAnimationDone(this._enterAnimationDuration);\n    };\n    /**\r\n     * Completes the dialog close by clearing potential animation classes, restoring\r\n     * focus and emitting a closed event.\r\n     */\n    this._finishDialogClose = () => {\n      this._clearAnimationClasses();\n      this._animationStateChanged.emit({\n        state: 'closed',\n        totalTime: this._exitAnimationDuration\n      });\n    };\n  }\n  _contentAttached() {\n    // Delegate to the original dialog-container initialization (i.e. saving the\n    // previous element, setting up the focus trap and moving focus to the container).\n    super._contentAttached();\n    // Note: Usually we would be able to use the MDC dialog foundation here to handle\n    // the dialog animation for us, but there are a few reasons why we just leverage\n    // their styles and not use the runtime foundation code:\n    //   1. Foundation does not allow us to disable animations.\n    //   2. Foundation contains unnecessary features we don't need and aren't\n    //      tree-shakeable. e.g. background scrim, keyboard event handlers for ESC button.\n    //   3. Foundation uses unnecessary timers for animations to work around limitations\n    //      in React's `setState` mechanism.\n    //      https://github.com/material-components/material-components-web/pull/3682.\n    this._startOpenAnimation();\n  }\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    if (this._animationTimer !== null) {\n      clearTimeout(this._animationTimer);\n    }\n  }\n  /** Starts the dialog open animation if enabled. */\n  _startOpenAnimation() {\n    this._animationStateChanged.emit({\n      state: 'opening',\n      totalTime: this._enterAnimationDuration\n    });\n    if (this._animationsEnabled) {\n      this._hostElement.style.setProperty(TRANSITION_DURATION_PROPERTY, `${this._enterAnimationDuration}ms`);\n      // We need to give the `setProperty` call from above some time to be applied.\n      // One would expect that the open class is added once the animation finished, but MDC\n      // uses the open class in combination with the opening class to start the animation.\n      this._requestAnimationFrame(() => this._hostElement.classList.add(OPENING_CLASS, OPEN_CLASS));\n      this._waitForAnimationToComplete(this._enterAnimationDuration, this._finishDialogOpen);\n    } else {\n      this._hostElement.classList.add(OPEN_CLASS);\n      // Note: We could immediately finish the dialog opening here with noop animations,\n      // but we defer until next tick so that consumers can subscribe to `afterOpened`.\n      // Executing this immediately would mean that `afterOpened` emits synchronously\n      // on `dialog.open` before the consumer had a change to subscribe to `afterOpened`.\n      Promise.resolve().then(() => this._finishDialogOpen());\n    }\n  }\n  /**\r\n   * Starts the exit animation of the dialog if enabled. This method is\r\n   * called by the dialog ref.\r\n   */\n  _startExitAnimation() {\n    this._animationStateChanged.emit({\n      state: 'closing',\n      totalTime: this._exitAnimationDuration\n    });\n    this._hostElement.classList.remove(OPEN_CLASS);\n    if (this._animationsEnabled) {\n      this._hostElement.style.setProperty(TRANSITION_DURATION_PROPERTY, `${this._exitAnimationDuration}ms`);\n      // We need to give the `setProperty` call from above some time to be applied.\n      this._requestAnimationFrame(() => this._hostElement.classList.add(CLOSING_CLASS));\n      this._waitForAnimationToComplete(this._exitAnimationDuration, this._finishDialogClose);\n    } else {\n      // This subscription to the `OverlayRef#backdropClick` observable in the `DialogRef` is\n      // set up before any user can subscribe to the backdrop click. The subscription triggers\n      // the dialog close and this method synchronously. If we'd synchronously emit the `CLOSED`\n      // animation state event if animations are disabled, the overlay would be disposed\n      // immediately and all other subscriptions to `DialogRef#backdropClick` would be silently\n      // skipped. We work around this by waiting with the dialog close until the next tick when\n      // all subscriptions have been fired as expected. This is not an ideal solution, but\n      // there doesn't seem to be any other good way. Alternatives that have been considered:\n      //   1. Deferring `DialogRef.close`. This could be a breaking change due to a new microtask.\n      //      Also this issue is specific to the MDC implementation where the dialog could\n      //      technically be closed synchronously. In the non-MDC one, Angular animations are used\n      //      and closing always takes at least a tick.\n      //   2. Ensuring that user subscriptions to `backdropClick`, `keydownEvents` in the dialog\n      //      ref are first. This would solve the issue, but has the risk of memory leaks and also\n      //      doesn't solve the case where consumers call `DialogRef.close` in their subscriptions.\n      // Based on the fact that this is specific to the MDC-based implementation of the dialog\n      // animations, the defer is applied here.\n      Promise.resolve().then(() => this._finishDialogClose());\n    }\n  }\n  /** Clears all dialog animation classes. */\n  _clearAnimationClasses() {\n    this._hostElement.classList.remove(OPENING_CLASS, CLOSING_CLASS);\n  }\n  _waitForAnimationToComplete(duration, callback) {\n    if (this._animationTimer !== null) {\n      clearTimeout(this._animationTimer);\n    }\n    // Note that we want this timer to run inside the NgZone, because we want\n    // the related events like `afterClosed` to be inside the zone as well.\n    this._animationTimer = setTimeout(callback, duration);\n  }\n  /** Runs a callback in `requestAnimationFrame`, if available. */\n  _requestAnimationFrame(callback) {\n    this._ngZone.runOutsideAngular(() => {\n      if (typeof requestAnimationFrame === 'function') {\n        requestAnimationFrame(callback);\n      } else {\n        callback();\n      }\n    });\n  }\n}\n_class2 = MatDialogContainer;\n_class2.ɵfac = function _class2_Factory(t) {\n  return new (t || _class2)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.FocusTrapFactory), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(MatDialogConfig), i0.ɵɵdirectiveInject(i1.InteractivityChecker), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1$1.OverlayRef), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), i0.ɵɵdirectiveInject(i1.FocusMonitor));\n};\n_class2.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: _class2,\n  selectors: [[\"mat-dialog-container\"]],\n  hostAttrs: [\"tabindex\", \"-1\", 1, \"mat-mdc-dialog-container\", \"mdc-dialog\"],\n  hostVars: 8,\n  hostBindings: function _class2_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"id\", ctx._config.id);\n      i0.ɵɵattribute(\"aria-modal\", ctx._config.ariaModal)(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledByQueue[0])(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n      i0.ɵɵclassProp(\"_mat-animation-noopable\", !ctx._animationsEnabled);\n    }\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 0,\n  consts: [[1, \"mdc-dialog__container\"], [1, \"mat-mdc-dialog-surface\", \"mdc-dialog__surface\"], [\"cdkPortalOutlet\", \"\"]],\n  template: function _class2_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      i0.ɵɵtemplate(2, _class2_ng_template_2_Template, 0, 0, \"ng-template\", 2);\n      i0.ɵɵelementEnd()();\n    }\n  },\n  dependencies: [i4.CdkPortalOutlet],\n  styles: [\".mdc-elevation-overlay{position:absolute;border-radius:inherit;pointer-events:none;opacity:var(--mdc-elevation-overlay-opacity, 0);transition:opacity 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-dialog,.mdc-dialog__scrim{position:fixed;top:0;left:0;align-items:center;justify-content:center;box-sizing:border-box;width:100%;height:100%}.mdc-dialog{display:none;z-index:var(--mdc-dialog-z-index, 7)}.mdc-dialog .mdc-dialog__content{padding:20px 24px 20px 24px}.mdc-dialog .mdc-dialog__surface{min-width:280px}@media(max-width: 592px){.mdc-dialog .mdc-dialog__surface{max-width:calc(100vw - 32px)}}@media(min-width: 592px){.mdc-dialog .mdc-dialog__surface{max-width:560px}}.mdc-dialog .mdc-dialog__surface{max-height:calc(100% - 32px)}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-width:none}@media(max-width: 960px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:560px;width:560px}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}@media(max-width: 720px)and (max-width: 672px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:calc(100vw - 112px)}}@media(max-width: 720px)and (min-width: 672px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:560px}}@media(max-width: 720px)and (max-height: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:calc(100vh - 160px)}}@media(max-width: 720px)and (min-height: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:560px}}@media(max-width: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}@media(max-width: 720px)and (max-height: 400px),(max-width: 600px),(min-width: 720px)and (max-height: 400px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{height:100%;max-height:100vh;max-width:100vw;width:100vw;border-radius:0}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{order:-1;left:-12px}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__header{padding:0 16px 9px;justify-content:flex-start}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__title{margin-left:calc(16px - 2 * 12px)}}@media(min-width: 960px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:calc(100vw - 400px)}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}.mdc-dialog.mdc-dialog__scrim--hidden .mdc-dialog__scrim{opacity:0}.mdc-dialog__scrim{opacity:0;z-index:-1}.mdc-dialog__container{display:flex;flex-direction:row;align-items:center;justify-content:space-around;box-sizing:border-box;height:100%;transform:scale(0.8);opacity:0;pointer-events:none}.mdc-dialog__surface{position:relative;display:flex;flex-direction:column;flex-grow:0;flex-shrink:0;box-sizing:border-box;max-width:100%;max-height:100%;pointer-events:auto;overflow-y:auto;outline:0}.mdc-dialog__surface .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}[dir=rtl] .mdc-dialog__surface,.mdc-dialog__surface[dir=rtl]{text-align:right}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-dialog__surface{outline:2px solid windowText}}.mdc-dialog__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:2px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-dialog__surface::before{border-color:CanvasText}}@media screen and (-ms-high-contrast: active),screen and (-ms-high-contrast: none){.mdc-dialog__surface::before{content:none}}.mdc-dialog__title{display:block;margin-top:0;position:relative;flex-shrink:0;box-sizing:border-box;margin:0 0 1px;padding:0 24px 9px}.mdc-dialog__title::before{display:inline-block;width:0;height:40px;content:\\\"\\\";vertical-align:0}[dir=rtl] .mdc-dialog__title,.mdc-dialog__title[dir=rtl]{text-align:right}.mdc-dialog--scrollable .mdc-dialog__title{margin-bottom:1px;padding-bottom:15px}.mdc-dialog--fullscreen .mdc-dialog__header{align-items:baseline;border-bottom:1px solid rgba(0,0,0,0);display:inline-flex;justify-content:space-between;padding:0 24px 9px;z-index:1}@media screen and (forced-colors: active){.mdc-dialog--fullscreen .mdc-dialog__header{border-bottom-color:CanvasText}}.mdc-dialog--fullscreen .mdc-dialog__header .mdc-dialog__close{right:-12px}.mdc-dialog--fullscreen .mdc-dialog__title{margin-bottom:0;padding:0;border-bottom:0}.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__title{border-bottom:0;margin-bottom:0}.mdc-dialog--fullscreen .mdc-dialog__close{top:5px}.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__actions{border-top:1px solid rgba(0,0,0,0)}@media screen and (forced-colors: active){.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__actions{border-top-color:CanvasText}}.mdc-dialog--fullscreen--titleless .mdc-dialog__close{margin-top:4px}.mdc-dialog--fullscreen--titleless.mdc-dialog--scrollable .mdc-dialog__close{margin-top:0}.mdc-dialog__content{flex-grow:1;box-sizing:border-box;margin:0;overflow:auto}.mdc-dialog__content>:first-child{margin-top:0}.mdc-dialog__content>:last-child{margin-bottom:0}.mdc-dialog__title+.mdc-dialog__content,.mdc-dialog__header+.mdc-dialog__content{padding-top:0}.mdc-dialog--scrollable .mdc-dialog__title+.mdc-dialog__content{padding-top:8px;padding-bottom:8px}.mdc-dialog__content .mdc-deprecated-list:first-child:last-child{padding:6px 0 0}.mdc-dialog--scrollable .mdc-dialog__content .mdc-deprecated-list:first-child:last-child{padding:0}.mdc-dialog__actions{display:flex;position:relative;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:flex-end;box-sizing:border-box;min-height:52px;margin:0;padding:8px;border-top:1px solid rgba(0,0,0,0)}@media screen and (forced-colors: active){.mdc-dialog__actions{border-top-color:CanvasText}}.mdc-dialog--stacked .mdc-dialog__actions{flex-direction:column;align-items:flex-end}.mdc-dialog__button{margin-left:8px;margin-right:0;max-width:100%;text-align:right}[dir=rtl] .mdc-dialog__button,.mdc-dialog__button[dir=rtl]{margin-left:0;margin-right:8px}.mdc-dialog__button:first-child{margin-left:0;margin-right:0}[dir=rtl] .mdc-dialog__button:first-child,.mdc-dialog__button:first-child[dir=rtl]{margin-left:0;margin-right:0}[dir=rtl] .mdc-dialog__button,.mdc-dialog__button[dir=rtl]{text-align:left}.mdc-dialog--stacked .mdc-dialog__button:not(:first-child){margin-top:12px}.mdc-dialog--open,.mdc-dialog--opening,.mdc-dialog--closing{display:flex}.mdc-dialog--opening .mdc-dialog__scrim{transition:opacity 150ms linear}.mdc-dialog--opening .mdc-dialog__container{transition:opacity 75ms linear,transform 150ms 0ms cubic-bezier(0, 0, 0.2, 1)}.mdc-dialog--closing .mdc-dialog__scrim,.mdc-dialog--closing .mdc-dialog__container{transition:opacity 75ms linear}.mdc-dialog--closing .mdc-dialog__container{transform:none}.mdc-dialog--open .mdc-dialog__scrim{opacity:1}.mdc-dialog--open .mdc-dialog__container{transform:none;opacity:1}.mdc-dialog--open.mdc-dialog__surface-scrim--shown .mdc-dialog__surface-scrim{opacity:1}.mdc-dialog--open.mdc-dialog__surface-scrim--hiding .mdc-dialog__surface-scrim{transition:opacity 75ms linear}.mdc-dialog--open.mdc-dialog__surface-scrim--showing .mdc-dialog__surface-scrim{transition:opacity 150ms linear}.mdc-dialog__surface-scrim{display:none;opacity:0;position:absolute;width:100%;height:100%;z-index:1}.mdc-dialog__surface-scrim--shown .mdc-dialog__surface-scrim,.mdc-dialog__surface-scrim--showing .mdc-dialog__surface-scrim,.mdc-dialog__surface-scrim--hiding .mdc-dialog__surface-scrim{display:block}.mdc-dialog-scroll-lock{overflow:hidden}.mdc-dialog--no-content-padding .mdc-dialog__content{padding:0}.mdc-dialog--sheet .mdc-dialog__container .mdc-dialog__close{right:12px;top:9px;position:absolute;z-index:1}.mdc-dialog__scrim--removed{pointer-events:none}.mdc-dialog__scrim--removed .mdc-dialog__scrim,.mdc-dialog__scrim--removed .mdc-dialog__surface-scrim{display:none}.mat-mdc-dialog-content{max-height:65vh}.mat-mdc-dialog-container{position:static;display:block}.mat-mdc-dialog-container,.mat-mdc-dialog-container .mdc-dialog__container,.mat-mdc-dialog-container .mdc-dialog__surface{max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit}.mat-mdc-dialog-container .mdc-dialog__surface{display:block;width:100%;height:100%}.mat-mdc-dialog-container{--mdc-dialog-container-elevation-shadow:0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12);--mdc-dialog-container-shadow-color:#000;--mdc-dialog-container-shape:4px;--mdc-dialog-container-elevation: var(--mdc-dialog-container-elevation-shadow);outline:0}.mat-mdc-dialog-container .mdc-dialog__surface{background-color:var(--mdc-dialog-container-color, white)}.mat-mdc-dialog-container .mdc-dialog__surface{box-shadow:var(--mdc-dialog-container-elevation, 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12))}.mat-mdc-dialog-container .mdc-dialog__surface{border-radius:var(--mdc-dialog-container-shape, 4px)}.mat-mdc-dialog-container .mdc-dialog__title{font-family:var(--mdc-dialog-subhead-font, Roboto, sans-serif);line-height:var(--mdc-dialog-subhead-line-height, 1.5rem);font-size:var(--mdc-dialog-subhead-size, 1rem);font-weight:var(--mdc-dialog-subhead-weight, 400);letter-spacing:var(--mdc-dialog-subhead-tracking, 0.03125em)}.mat-mdc-dialog-container .mdc-dialog__title{color:var(--mdc-dialog-subhead-color, rgba(0, 0, 0, 0.87))}.mat-mdc-dialog-container .mdc-dialog__content{font-family:var(--mdc-dialog-supporting-text-font, Roboto, sans-serif);line-height:var(--mdc-dialog-supporting-text-line-height, 1.5rem);font-size:var(--mdc-dialog-supporting-text-size, 1rem);font-weight:var(--mdc-dialog-supporting-text-weight, 400);letter-spacing:var(--mdc-dialog-supporting-text-tracking, 0.03125em)}.mat-mdc-dialog-container .mdc-dialog__content{color:var(--mdc-dialog-supporting-text-color, rgba(0, 0, 0, 0.6))}.mat-mdc-dialog-container .mdc-dialog__container{transition-duration:var(--mat-dialog-transition-duration, 0ms)}.mat-mdc-dialog-container._mat-animation-noopable .mdc-dialog__container{transition:none}.mat-mdc-dialog-content{display:block}.mat-mdc-dialog-actions{justify-content:start}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-center,.mat-mdc-dialog-actions[align=center]{justify-content:center}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-end,.mat-mdc-dialog-actions[align=end]{justify-content:flex-end}.mat-mdc-dialog-actions .mat-button-base+.mat-button-base,.mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-mdc-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\"],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogContainer, [{\n    type: Component,\n    args: [{\n      selector: 'mat-dialog-container',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      host: {\n        'class': 'mat-mdc-dialog-container mdc-dialog',\n        'tabindex': '-1',\n        '[attr.aria-modal]': '_config.ariaModal',\n        '[id]': '_config.id',\n        '[attr.role]': '_config.role',\n        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledByQueue[0]',\n        '[attr.aria-label]': '_config.ariaLabel',\n        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n        '[class._mat-animation-noopable]': '!_animationsEnabled'\n      },\n      template: \"<div class=\\\"mdc-dialog__container\\\">\\n  <div class=\\\"mat-mdc-dialog-surface mdc-dialog__surface\\\">\\n    <ng-template cdkPortalOutlet></ng-template>\\n  </div>\\n</div>\\n\",\n      styles: [\".mdc-elevation-overlay{position:absolute;border-radius:inherit;pointer-events:none;opacity:var(--mdc-elevation-overlay-opacity, 0);transition:opacity 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-dialog,.mdc-dialog__scrim{position:fixed;top:0;left:0;align-items:center;justify-content:center;box-sizing:border-box;width:100%;height:100%}.mdc-dialog{display:none;z-index:var(--mdc-dialog-z-index, 7)}.mdc-dialog .mdc-dialog__content{padding:20px 24px 20px 24px}.mdc-dialog .mdc-dialog__surface{min-width:280px}@media(max-width: 592px){.mdc-dialog .mdc-dialog__surface{max-width:calc(100vw - 32px)}}@media(min-width: 592px){.mdc-dialog .mdc-dialog__surface{max-width:560px}}.mdc-dialog .mdc-dialog__surface{max-height:calc(100% - 32px)}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-width:none}@media(max-width: 960px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:560px;width:560px}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}@media(max-width: 720px)and (max-width: 672px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:calc(100vw - 112px)}}@media(max-width: 720px)and (min-width: 672px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:560px}}@media(max-width: 720px)and (max-height: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:calc(100vh - 160px)}}@media(max-width: 720px)and (min-height: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:560px}}@media(max-width: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}@media(max-width: 720px)and (max-height: 400px),(max-width: 600px),(min-width: 720px)and (max-height: 400px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{height:100%;max-height:100vh;max-width:100vw;width:100vw;border-radius:0}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{order:-1;left:-12px}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__header{padding:0 16px 9px;justify-content:flex-start}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__title{margin-left:calc(16px - 2 * 12px)}}@media(min-width: 960px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:calc(100vw - 400px)}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}.mdc-dialog.mdc-dialog__scrim--hidden .mdc-dialog__scrim{opacity:0}.mdc-dialog__scrim{opacity:0;z-index:-1}.mdc-dialog__container{display:flex;flex-direction:row;align-items:center;justify-content:space-around;box-sizing:border-box;height:100%;transform:scale(0.8);opacity:0;pointer-events:none}.mdc-dialog__surface{position:relative;display:flex;flex-direction:column;flex-grow:0;flex-shrink:0;box-sizing:border-box;max-width:100%;max-height:100%;pointer-events:auto;overflow-y:auto;outline:0}.mdc-dialog__surface .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}[dir=rtl] .mdc-dialog__surface,.mdc-dialog__surface[dir=rtl]{text-align:right}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-dialog__surface{outline:2px solid windowText}}.mdc-dialog__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:2px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-dialog__surface::before{border-color:CanvasText}}@media screen and (-ms-high-contrast: active),screen and (-ms-high-contrast: none){.mdc-dialog__surface::before{content:none}}.mdc-dialog__title{display:block;margin-top:0;position:relative;flex-shrink:0;box-sizing:border-box;margin:0 0 1px;padding:0 24px 9px}.mdc-dialog__title::before{display:inline-block;width:0;height:40px;content:\\\"\\\";vertical-align:0}[dir=rtl] .mdc-dialog__title,.mdc-dialog__title[dir=rtl]{text-align:right}.mdc-dialog--scrollable .mdc-dialog__title{margin-bottom:1px;padding-bottom:15px}.mdc-dialog--fullscreen .mdc-dialog__header{align-items:baseline;border-bottom:1px solid rgba(0,0,0,0);display:inline-flex;justify-content:space-between;padding:0 24px 9px;z-index:1}@media screen and (forced-colors: active){.mdc-dialog--fullscreen .mdc-dialog__header{border-bottom-color:CanvasText}}.mdc-dialog--fullscreen .mdc-dialog__header .mdc-dialog__close{right:-12px}.mdc-dialog--fullscreen .mdc-dialog__title{margin-bottom:0;padding:0;border-bottom:0}.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__title{border-bottom:0;margin-bottom:0}.mdc-dialog--fullscreen .mdc-dialog__close{top:5px}.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__actions{border-top:1px solid rgba(0,0,0,0)}@media screen and (forced-colors: active){.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__actions{border-top-color:CanvasText}}.mdc-dialog--fullscreen--titleless .mdc-dialog__close{margin-top:4px}.mdc-dialog--fullscreen--titleless.mdc-dialog--scrollable .mdc-dialog__close{margin-top:0}.mdc-dialog__content{flex-grow:1;box-sizing:border-box;margin:0;overflow:auto}.mdc-dialog__content>:first-child{margin-top:0}.mdc-dialog__content>:last-child{margin-bottom:0}.mdc-dialog__title+.mdc-dialog__content,.mdc-dialog__header+.mdc-dialog__content{padding-top:0}.mdc-dialog--scrollable .mdc-dialog__title+.mdc-dialog__content{padding-top:8px;padding-bottom:8px}.mdc-dialog__content .mdc-deprecated-list:first-child:last-child{padding:6px 0 0}.mdc-dialog--scrollable .mdc-dialog__content .mdc-deprecated-list:first-child:last-child{padding:0}.mdc-dialog__actions{display:flex;position:relative;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:flex-end;box-sizing:border-box;min-height:52px;margin:0;padding:8px;border-top:1px solid rgba(0,0,0,0)}@media screen and (forced-colors: active){.mdc-dialog__actions{border-top-color:CanvasText}}.mdc-dialog--stacked .mdc-dialog__actions{flex-direction:column;align-items:flex-end}.mdc-dialog__button{margin-left:8px;margin-right:0;max-width:100%;text-align:right}[dir=rtl] .mdc-dialog__button,.mdc-dialog__button[dir=rtl]{margin-left:0;margin-right:8px}.mdc-dialog__button:first-child{margin-left:0;margin-right:0}[dir=rtl] .mdc-dialog__button:first-child,.mdc-dialog__button:first-child[dir=rtl]{margin-left:0;margin-right:0}[dir=rtl] .mdc-dialog__button,.mdc-dialog__button[dir=rtl]{text-align:left}.mdc-dialog--stacked .mdc-dialog__button:not(:first-child){margin-top:12px}.mdc-dialog--open,.mdc-dialog--opening,.mdc-dialog--closing{display:flex}.mdc-dialog--opening .mdc-dialog__scrim{transition:opacity 150ms linear}.mdc-dialog--opening .mdc-dialog__container{transition:opacity 75ms linear,transform 150ms 0ms cubic-bezier(0, 0, 0.2, 1)}.mdc-dialog--closing .mdc-dialog__scrim,.mdc-dialog--closing .mdc-dialog__container{transition:opacity 75ms linear}.mdc-dialog--closing .mdc-dialog__container{transform:none}.mdc-dialog--open .mdc-dialog__scrim{opacity:1}.mdc-dialog--open .mdc-dialog__container{transform:none;opacity:1}.mdc-dialog--open.mdc-dialog__surface-scrim--shown .mdc-dialog__surface-scrim{opacity:1}.mdc-dialog--open.mdc-dialog__surface-scrim--hiding .mdc-dialog__surface-scrim{transition:opacity 75ms linear}.mdc-dialog--open.mdc-dialog__surface-scrim--showing .mdc-dialog__surface-scrim{transition:opacity 150ms linear}.mdc-dialog__surface-scrim{display:none;opacity:0;position:absolute;width:100%;height:100%;z-index:1}.mdc-dialog__surface-scrim--shown .mdc-dialog__surface-scrim,.mdc-dialog__surface-scrim--showing .mdc-dialog__surface-scrim,.mdc-dialog__surface-scrim--hiding .mdc-dialog__surface-scrim{display:block}.mdc-dialog-scroll-lock{overflow:hidden}.mdc-dialog--no-content-padding .mdc-dialog__content{padding:0}.mdc-dialog--sheet .mdc-dialog__container .mdc-dialog__close{right:12px;top:9px;position:absolute;z-index:1}.mdc-dialog__scrim--removed{pointer-events:none}.mdc-dialog__scrim--removed .mdc-dialog__scrim,.mdc-dialog__scrim--removed .mdc-dialog__surface-scrim{display:none}.mat-mdc-dialog-content{max-height:65vh}.mat-mdc-dialog-container{position:static;display:block}.mat-mdc-dialog-container,.mat-mdc-dialog-container .mdc-dialog__container,.mat-mdc-dialog-container .mdc-dialog__surface{max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit}.mat-mdc-dialog-container .mdc-dialog__surface{display:block;width:100%;height:100%}.mat-mdc-dialog-container{--mdc-dialog-container-elevation-shadow:0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12);--mdc-dialog-container-shadow-color:#000;--mdc-dialog-container-shape:4px;--mdc-dialog-container-elevation: var(--mdc-dialog-container-elevation-shadow);outline:0}.mat-mdc-dialog-container .mdc-dialog__surface{background-color:var(--mdc-dialog-container-color, white)}.mat-mdc-dialog-container .mdc-dialog__surface{box-shadow:var(--mdc-dialog-container-elevation, 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12))}.mat-mdc-dialog-container .mdc-dialog__surface{border-radius:var(--mdc-dialog-container-shape, 4px)}.mat-mdc-dialog-container .mdc-dialog__title{font-family:var(--mdc-dialog-subhead-font, Roboto, sans-serif);line-height:var(--mdc-dialog-subhead-line-height, 1.5rem);font-size:var(--mdc-dialog-subhead-size, 1rem);font-weight:var(--mdc-dialog-subhead-weight, 400);letter-spacing:var(--mdc-dialog-subhead-tracking, 0.03125em)}.mat-mdc-dialog-container .mdc-dialog__title{color:var(--mdc-dialog-subhead-color, rgba(0, 0, 0, 0.87))}.mat-mdc-dialog-container .mdc-dialog__content{font-family:var(--mdc-dialog-supporting-text-font, Roboto, sans-serif);line-height:var(--mdc-dialog-supporting-text-line-height, 1.5rem);font-size:var(--mdc-dialog-supporting-text-size, 1rem);font-weight:var(--mdc-dialog-supporting-text-weight, 400);letter-spacing:var(--mdc-dialog-supporting-text-tracking, 0.03125em)}.mat-mdc-dialog-container .mdc-dialog__content{color:var(--mdc-dialog-supporting-text-color, rgba(0, 0, 0, 0.6))}.mat-mdc-dialog-container .mdc-dialog__container{transition-duration:var(--mat-dialog-transition-duration, 0ms)}.mat-mdc-dialog-container._mat-animation-noopable .mdc-dialog__container{transition:none}.mat-mdc-dialog-content{display:block}.mat-mdc-dialog-actions{justify-content:start}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-center,.mat-mdc-dialog-actions[align=center]{justify-content:center}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-end,.mat-mdc-dialog-actions[align=end]{justify-content:flex-end}.mat-mdc-dialog-actions .mat-button-base+.mat-button-base,.mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-mdc-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.FocusTrapFactory\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: MatDialogConfig\n    }, {\n      type: i1.InteractivityChecker\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i1$1.OverlayRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: i1.FocusMonitor\n    }];\n  }, null);\n})();\n\n/**\r\n * Reference to a dialog opened via the MatDialog service.\r\n */\nclass MatDialogRef {\n  constructor(_ref, config, _containerInstance) {\n    this._ref = _ref;\n    this._containerInstance = _containerInstance;\n    /** Subject for notifying the user that the dialog has finished opening. */\n    this._afterOpened = new Subject();\n    /** Subject for notifying the user that the dialog has started closing. */\n    this._beforeClosed = new Subject();\n    /** Current state of the dialog. */\n    this._state = 0 /* MatDialogState.OPEN */;\n    this.disableClose = config.disableClose;\n    this.id = _ref.id;\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(filter(event => event.state === 'opened'), take(1)).subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(filter(event => event.state === 'closed'), take(1)).subscribe(() => {\n      clearTimeout(this._closeFallbackTimeout);\n      this._finishDialogClose();\n    });\n    _ref.overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._finishDialogClose();\n    });\n    merge(this.backdropClick(), this.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)))).subscribe(event => {\n      if (!this.disableClose) {\n        event.preventDefault();\n        _closeDialogVia(this, event.type === 'keydown' ? 'keyboard' : 'mouse');\n      }\n    });\n  }\n  /**\r\n   * Close the dialog.\r\n   * @param dialogResult Optional result to return to the dialog opener.\r\n   */\n  close(dialogResult) {\n    this._result = dialogResult;\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(filter(event => event.state === 'closing'), take(1)).subscribe(event => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._ref.overlayRef.detachBackdrop();\n      // The logic that disposes of the overlay depends on the exit animation completing, however\n      // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n      // timeout which will clean everything up if the animation hasn't fired within the specified\n      // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n      // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n      this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\n    });\n    this._state = 1 /* MatDialogState.CLOSING */;\n    this._containerInstance._startExitAnimation();\n  }\n  /**\r\n   * Gets an observable that is notified when the dialog is finished opening.\r\n   */\n  afterOpened() {\n    return this._afterOpened;\n  }\n  /**\r\n   * Gets an observable that is notified when the dialog is finished closing.\r\n   */\n  afterClosed() {\n    return this._ref.closed;\n  }\n  /**\r\n   * Gets an observable that is notified when the dialog has started closing.\r\n   */\n  beforeClosed() {\n    return this._beforeClosed;\n  }\n  /**\r\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\r\n   */\n  backdropClick() {\n    return this._ref.backdropClick;\n  }\n  /**\r\n   * Gets an observable that emits when keydown events are targeted on the overlay.\r\n   */\n  keydownEvents() {\n    return this._ref.keydownEvents;\n  }\n  /**\r\n   * Updates the dialog's position.\r\n   * @param position New dialog position.\r\n   */\n  updatePosition(position) {\n    let strategy = this._ref.config.positionStrategy;\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n    this._ref.updatePosition();\n    return this;\n  }\n  /**\r\n   * Updates the dialog's width and height.\r\n   * @param width New width of the dialog.\r\n   * @param height New height of the dialog.\r\n   */\n  updateSize(width = '', height = '') {\n    this._ref.updateSize(width, height);\n    return this;\n  }\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes) {\n    this._ref.addPanelClass(classes);\n    return this;\n  }\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes) {\n    this._ref.removePanelClass(classes);\n    return this;\n  }\n  /** Gets the current state of the dialog's lifecycle. */\n  getState() {\n    return this._state;\n  }\n  /**\r\n   * Finishes the dialog close by updating the state of the dialog\r\n   * and disposing the overlay.\r\n   */\n  _finishDialogClose() {\n    this._state = 2 /* MatDialogState.CLOSED */;\n    this._ref.close(this._result, {\n      focusOrigin: this._closeInteractionType\n    });\n    this.componentInstance = null;\n  }\n}\n/**\r\n * Closes the dialog with the specified interaction type. This is currently not part of\r\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\r\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\r\n */\n// TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\nfunction _closeDialogVia(ref, interactionType, result) {\n  ref._closeInteractionType = interactionType;\n  return ref.close(result);\n}\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nconst MAT_DIALOG_DATA = new InjectionToken('MatMdcDialogData');\n/** Injection token that can be used to specify default dialog options. */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-mdc-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-mdc-dialog-scroll-strategy');\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.block();\n}\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n/**\r\n * Base class for dialog services. The base dialog service allows\r\n * for arbitrary dialog refs and dialog container components.\r\n */\nclass _MatDialogBase {\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs() {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened() {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n  _getAfterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n  }\n  constructor(_overlay, injector, _defaultOptions, _parentDialog,\n  /**\r\n   * @deprecated No longer used. To be removed.\r\n   * @breaking-change 15.0.0\r\n   */\n  _overlayContainer, scrollStrategy, _dialogRefConstructor, _dialogContainerType, _dialogDataToken,\n  /**\r\n   * @deprecated No longer used. To be removed.\r\n   * @breaking-change 14.0.0\r\n   */\n  _animationMode) {\n    this._overlay = _overlay;\n    this._defaultOptions = _defaultOptions;\n    this._parentDialog = _parentDialog;\n    this._dialogRefConstructor = _dialogRefConstructor;\n    this._dialogContainerType = _dialogContainerType;\n    this._dialogDataToken = _dialogDataToken;\n    this._openDialogsAtThisLevel = [];\n    this._afterAllClosedAtThisLevel = new Subject();\n    this._afterOpenedAtThisLevel = new Subject();\n    this._idPrefix = 'mat-dialog-';\n    this.dialogConfigClass = MatDialogConfig;\n    /**\r\n     * Stream that emits when all open dialog have finished closing.\r\n     * Will emit on subscribe if there are no open dialogs to begin with.\r\n     */\n    this.afterAllClosed = defer(() => this.openDialogs.length ? this._getAfterAllClosed() : this._getAfterAllClosed().pipe(startWith(undefined)));\n    this._scrollStrategy = scrollStrategy;\n    this._dialog = injector.get(Dialog);\n  }\n  open(componentOrTemplateRef, config) {\n    let dialogRef;\n    config = {\n      ...(this._defaultOptions || new MatDialogConfig()),\n      ...config\n    };\n    config.id = config.id || `${this._idPrefix}${uniqueId++}`;\n    config.scrollStrategy = config.scrollStrategy || this._scrollStrategy();\n    const cdkRef = this._dialog.open(componentOrTemplateRef, {\n      ...config,\n      positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),\n      // Disable closing since we need to sync it up to the animation ourselves.\n      disableClose: true,\n      // Disable closing on destroy, because this service cleans up its open dialogs as well.\n      // We want to do the cleanup here, rather than the CDK service, because the CDK destroys\n      // the dialogs immediately whereas we want it to wait for the animations to finish.\n      closeOnDestroy: false,\n      // Disable closing on detachments so that we can sync up the animation.\n      // The Material dialog ref handles this manually.\n      closeOnOverlayDetachments: false,\n      container: {\n        type: this._dialogContainerType,\n        providers: () => [\n        // Provide our config as the CDK config as well since it has the same interface as the\n        // CDK one, but it contains the actual values passed in by the user for things like\n        // `disableClose` which we disable for the CDK dialog since we handle it ourselves.\n        {\n          provide: this.dialogConfigClass,\n          useValue: config\n        }, {\n          provide: DialogConfig,\n          useValue: config\n        }]\n      },\n      templateContext: () => ({\n        dialogRef\n      }),\n      providers: (ref, cdkConfig, dialogContainer) => {\n        dialogRef = new this._dialogRefConstructor(ref, config, dialogContainer);\n        dialogRef.updatePosition(config?.position);\n        return [{\n          provide: this._dialogContainerType,\n          useValue: dialogContainer\n        }, {\n          provide: this._dialogDataToken,\n          useValue: cdkConfig.data\n        }, {\n          provide: this._dialogRefConstructor,\n          useValue: dialogRef\n        }];\n      }\n    });\n    // This can't be assigned in the `providers` callback, because\n    // the instance hasn't been assigned to the CDK ref yet.\n    dialogRef.componentRef = cdkRef.componentRef;\n    dialogRef.componentInstance = cdkRef.componentInstance;\n    this.openDialogs.push(dialogRef);\n    this.afterOpened.next(dialogRef);\n    dialogRef.afterClosed().subscribe(() => {\n      const index = this.openDialogs.indexOf(dialogRef);\n      if (index > -1) {\n        this.openDialogs.splice(index, 1);\n        if (!this.openDialogs.length) {\n          this._getAfterAllClosed().next();\n        }\n      }\n    });\n    return dialogRef;\n  }\n  /**\r\n   * Closes all of the currently-open dialogs.\r\n   */\n  closeAll() {\n    this._closeDialogs(this.openDialogs);\n  }\n  /**\r\n   * Finds an open dialog by its id.\r\n   * @param id ID to use when looking up the dialog.\r\n   */\n  getDialogById(id) {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n  _closeDialogs(dialogs) {\n    let i = dialogs.length;\n    while (i--) {\n      dialogs[i].close();\n    }\n  }\n}\n_class3 = _MatDialogBase;\n_class3.ɵfac = function _class3_Factory(t) {\n  i0.ɵɵinvalidFactory();\n};\n_class3.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: _class3,\n  factory: _class3.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatDialogBase, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1$1.Overlay\n    }, {\n      type: i0.Injector\n    }, {\n      type: undefined\n    }, {\n      type: undefined\n    }, {\n      type: i1$1.OverlayContainer\n    }, {\n      type: undefined\n    }, {\n      type: i0.Type\n    }, {\n      type: i0.Type\n    }, {\n      type: i0.InjectionToken\n    }, {\n      type: undefined\n    }];\n  }, null);\n})();\n/**\r\n * Service to open Material Design modal dialogs.\r\n */\nclass MatDialog extends _MatDialogBase {\n  constructor(overlay, injector,\n  /**\r\n   * @deprecated `_location` parameter to be removed.\r\n   * @breaking-change 10.0.0\r\n   */\n  location, defaultOptions, scrollStrategy, parentDialog,\n  /**\r\n   * @deprecated No longer used. To be removed.\r\n   * @breaking-change 15.0.0\r\n   */\n  overlayContainer,\n  /**\r\n   * @deprecated No longer used. To be removed.\r\n   * @breaking-change 14.0.0\r\n   */\n  animationMode) {\n    super(overlay, injector, defaultOptions, parentDialog, overlayContainer, scrollStrategy, MatDialogRef, MatDialogContainer, MAT_DIALOG_DATA, animationMode);\n    this._idPrefix = 'mat-mdc-dialog-';\n  }\n}\n_class4 = MatDialog;\n_class4.ɵfac = function _class4_Factory(t) {\n  return new (t || _class4)(i0.ɵɵinject(i1$1.Overlay), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i2.Location, 8), i0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), i0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), i0.ɵɵinject(_class4, 12), i0.ɵɵinject(i1$1.OverlayContainer), i0.ɵɵinject(ANIMATION_MODULE_TYPE$1, 8));\n};\n_class4.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: _class4,\n  factory: _class4.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialog, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1$1.Overlay\n    }, {\n      type: i0.Injector\n    }, {\n      type: i2.Location,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: MatDialogConfig,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DIALOG_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_DIALOG_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: MatDialog,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: i1$1.OverlayContainer\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE$1]\n      }]\n    }];\n  }, null);\n})();\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n/**\r\n * Button that will close the current dialog.\r\n */\nclass MatDialogClose {\n  constructor(\n  // The dialog title directive is always used in combination with a `MatDialogRef`.\n  // tslint:disable-next-line: lightweight-tokens\n  dialogRef, _elementRef, _dialog) {\n    this.dialogRef = dialogRef;\n    this._elementRef = _elementRef;\n    this._dialog = _dialog;\n    /** Default to \"button\" to prevents accidental form submits. */\n    this.type = 'button';\n  }\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n    }\n  }\n  ngOnChanges(changes) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n  _onButtonClick(event) {\n    // Determinate the focus origin using the click event, because using the FocusMonitor will\n    // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n    // dialog, and therefore clicking the button won't result in a focus change. This means that\n    // the FocusMonitor won't detect any origin change, and will always output `program`.\n    _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n  }\n}\n_class5 = MatDialogClose;\n_class5.ɵfac = function _class5_Factory(t) {\n  return new (t || _class5)(i0.ɵɵdirectiveInject(MatDialogRef, 8), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MatDialog));\n};\n_class5.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _class5,\n  selectors: [[\"\", \"mat-dialog-close\", \"\"], [\"\", \"matDialogClose\", \"\"]],\n  hostVars: 2,\n  hostBindings: function _class5_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function _class5_click_HostBindingHandler($event) {\n        return ctx._onButtonClick($event);\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵattribute(\"aria-label\", ctx.ariaLabel || null)(\"type\", ctx.type);\n    }\n  },\n  inputs: {\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    type: \"type\",\n    dialogResult: [\"mat-dialog-close\", \"dialogResult\"],\n    _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"]\n  },\n  exportAs: [\"matDialogClose\"],\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogClose, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-dialog-close], [matDialogClose]',\n      exportAs: 'matDialogClose',\n      host: {\n        '(click)': '_onButtonClick($event)',\n        '[attr.aria-label]': 'ariaLabel || null',\n        '[attr.type]': 'type'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatDialogRef,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: MatDialog\n    }];\n  }, {\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    type: [{\n      type: Input\n    }],\n    dialogResult: [{\n      type: Input,\n      args: ['mat-dialog-close']\n    }],\n    _matDialogClose: [{\n      type: Input,\n      args: ['matDialogClose']\n    }]\n  });\n})();\n/**\r\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\r\n */\nclass MatDialogTitle {\n  constructor(\n  // The dialog title directive is always used in combination with a `MatDialogRef`.\n  // tslint:disable-next-line: lightweight-tokens\n  _dialogRef, _elementRef, _dialog) {\n    this._dialogRef = _dialogRef;\n    this._elementRef = _elementRef;\n    this._dialog = _dialog;\n    this.id = `mat-mdc-dialog-title-${dialogElementUid++}`;\n  }\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n    }\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        // Note: we null check the queue, because there are some internal\n        // tests that are mocking out `MatDialogRef` incorrectly.\n        this._dialogRef._containerInstance?._ariaLabelledByQueue?.push(this.id);\n      });\n    }\n  }\n  ngOnDestroy() {\n    // Note: we null check the queue, because there are some internal\n    // tests that are mocking out `MatDialogRef` incorrectly.\n    const queue = this._dialogRef?._containerInstance?._ariaLabelledByQueue;\n    if (queue) {\n      Promise.resolve().then(() => {\n        const index = queue.indexOf(this.id);\n        if (index > -1) {\n          queue.splice(index, 1);\n        }\n      });\n    }\n  }\n}\n_class6 = MatDialogTitle;\n_class6.ɵfac = function _class6_Factory(t) {\n  return new (t || _class6)(i0.ɵɵdirectiveInject(MatDialogRef, 8), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MatDialog));\n};\n_class6.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _class6,\n  selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]],\n  hostAttrs: [1, \"mat-mdc-dialog-title\", \"mdc-dialog__title\"],\n  hostVars: 1,\n  hostBindings: function _class6_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"id\", ctx.id);\n    }\n  },\n  inputs: {\n    id: \"id\"\n  },\n  exportAs: [\"matDialogTitle\"]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogTitle, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-dialog-title], [matDialogTitle]',\n      exportAs: 'matDialogTitle',\n      host: {\n        'class': 'mat-mdc-dialog-title mdc-dialog__title',\n        '[id]': 'id'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatDialogRef,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: MatDialog\n    }];\n  }, {\n    id: [{\n      type: Input\n    }]\n  });\n})();\n/**\r\n * Scrollable content container of a dialog.\r\n */\nclass MatDialogContent {}\n_class7 = MatDialogContent;\n_class7.ɵfac = function _class7_Factory(t) {\n  return new (t || _class7)();\n};\n_class7.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _class7,\n  selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]],\n  hostAttrs: [1, \"mat-mdc-dialog-content\", \"mdc-dialog__content\"]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogContent, [{\n    type: Directive,\n    args: [{\n      selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n      host: {\n        'class': 'mat-mdc-dialog-content mdc-dialog__content'\n      }\n    }]\n  }], null, null);\n})();\n/**\r\n * Container for the bottom action buttons in a dialog.\r\n * Stays fixed to the bottom when scrolling.\r\n */\nclass MatDialogActions {\n  constructor() {\n    /**\r\n     * Horizontal alignment of action buttons.\r\n     */\n    this.align = 'start';\n  }\n}\n_class8 = MatDialogActions;\n_class8.ɵfac = function _class8_Factory(t) {\n  return new (t || _class8)();\n};\n_class8.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _class8,\n  selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]],\n  hostAttrs: [1, \"mat-mdc-dialog-actions\", \"mdc-dialog__actions\"],\n  hostVars: 4,\n  hostBindings: function _class8_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"mat-mdc-dialog-actions-align-center\", ctx.align === \"center\")(\"mat-mdc-dialog-actions-align-end\", ctx.align === \"end\");\n    }\n  },\n  inputs: {\n    align: \"align\"\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogActions, [{\n    type: Directive,\n    args: [{\n      selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n      host: {\n        'class': 'mat-mdc-dialog-actions mdc-dialog__actions',\n        '[class.mat-mdc-dialog-actions-align-center]': 'align === \"center\"',\n        '[class.mat-mdc-dialog-actions-align-end]': 'align === \"end\"'\n      }\n    }]\n  }], null, {\n    align: [{\n      type: Input\n    }]\n  });\n})();\n/**\r\n * Finds the closest MatDialogRef to an element by looking at the DOM.\r\n * @param element Element relative to which to look for a dialog.\r\n * @param openDialogs References to the currently-open dialogs.\r\n */\nfunction getClosestDialog(element, openDialogs) {\n  let parent = element.nativeElement.parentElement;\n  while (parent && !parent.classList.contains('mat-mdc-dialog-container')) {\n    parent = parent.parentElement;\n  }\n  return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\nclass MatDialogModule {}\n_class9 = MatDialogModule;\n_class9.ɵfac = function _class9_Factory(t) {\n  return new (t || _class9)();\n};\n_class9.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: _class9\n});\n_class9.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n  imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, MatCommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogModule, [{\n    type: NgModule,\n    args: [{\n      imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule],\n      exports: [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule],\n      declarations: [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent],\n      providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n\n/**\r\n * Default parameters for the animation for backwards compatibility.\r\n * @docs-private\r\n */\nconst _defaultParams = {\n  params: {\n    enterAnimationDuration: '150ms',\n    exitAnimationDuration: '75ms'\n  }\n};\n/**\r\n * Animations used by MatDialog.\r\n * @docs-private\r\n */\nconst matDialogAnimations = {\n  /** Animation that is applied on the dialog container by default. */\n  dialogContainer: trigger('dialogContainer', [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({\n    opacity: 0,\n    transform: 'scale(0.7)'\n  })), state('enter', style({\n    transform: 'none'\n  })), transition('* => enter', group([animate('{{enterAnimationDuration}} cubic-bezier(0, 0, 0.2, 1)', style({\n    transform: 'none',\n    opacity: 1\n  })), query('@*', animateChild(), {\n    optional: true\n  })]), _defaultParams), transition('* => void, * => exit', group([animate('{{exitAnimationDuration}} cubic-bezier(0.4, 0.0, 0.2, 1)', style({\n    opacity: 0\n  })), query('@*', animateChild(), {\n    optional: true\n  })]), _defaultParams)])\n};\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, _MatDialogBase, _MatDialogContainerBase, _closeDialogVia, _defaultParams, matDialogAnimations };","map":{"version":3,"names":["i1$1","Overlay","OverlayModule","i2","DOCUMENT","i0","EventEmitter","Component","Optional","Inject","ViewEncapsulation","ChangeDetectionStrategy","InjectionToken","Injectable","ANIMATION_MODULE_TYPE","ANIMATION_MODULE_TYPE$1","SkipSelf","Directive","Input","NgModule","i1","CdkDialogContainer","Dialog","DialogConfig","DialogModule","coerceNumberProperty","i4","PortalModule","Subject","merge","defer","filter","take","startWith","ESCAPE","hasModifierKey","MatCommonModule","trigger","state","style","transition","group","animate","query","animateChild","_class2_ng_template_2_Template","rf","ctx","MatDialogConfig","constructor","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","maxWidth","data","ariaDescribedBy","ariaLabelledBy","ariaLabel","ariaModal","autoFocus","restoreFocus","delayFocusTrap","closeOnNavigation","OPEN_CLASS","OPENING_CLASS","CLOSING_CLASS","OPEN_ANIMATION_DURATION","CLOSE_ANIMATION_DURATION","_MatDialogContainerBase","elementRef","focusTrapFactory","_document","dialogConfig","interactivityChecker","ngZone","overlayRef","focusMonitor","_animationStateChanged","_captureInitialFocus","_config","_trapFocus","_openAnimationDone","totalTime","next","_class","ɵfac","_class_Factory","t","ɵɵdirectiveInject","ElementRef","FocusTrapFactory","InteractivityChecker","NgZone","OverlayRef","FocusMonitor","ɵcmp","ɵɵdefineComponent","type","selectors","features","ɵɵInheritDefinitionFeature","decls","vars","template","_class_Template","encapsulation","ngDevMode","ɵsetClassMetadata","args","undefined","decorators","TRANSITION_DURATION_PROPERTY","parseCssTime","time","endsWith","substring","length","MatDialogContainer","document","checker","_animationMode","_animationsEnabled","_hostElement","_elementRef","nativeElement","_enterAnimationDuration","enterAnimationDuration","_exitAnimationDuration","exitAnimationDuration","_animationTimer","_finishDialogOpen","_clearAnimationClasses","_finishDialogClose","emit","_contentAttached","_startOpenAnimation","ngOnDestroy","clearTimeout","setProperty","_requestAnimationFrame","classList","add","_waitForAnimationToComplete","Promise","resolve","then","_startExitAnimation","remove","duration","callback","setTimeout","_ngZone","runOutsideAngular","requestAnimationFrame","_class2","_class2_Factory","hostAttrs","hostVars","hostBindings","_class2_HostBindings","ɵɵhostProperty","id","ɵɵattribute","_ariaLabelledByQueue","ɵɵclassProp","consts","_class2_Template","ɵɵelementStart","ɵɵtemplate","ɵɵelementEnd","dependencies","CdkPortalOutlet","styles","selector","None","changeDetection","Default","host","MatDialogRef","_ref","config","_containerInstance","_afterOpened","_beforeClosed","_state","pipe","event","subscribe","complete","_closeFallbackTimeout","detachments","_result","backdropClick","keydownEvents","keyCode","preventDefault","_closeDialogVia","close","dialogResult","detachBackdrop","afterOpened","afterClosed","closed","beforeClosed","updatePosition","position","strategy","positionStrategy","left","right","centerHorizontally","top","bottom","centerVertically","updateSize","addPanelClass","classes","removePanelClass","getState","focusOrigin","_closeInteractionType","componentInstance","ref","interactionType","result","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","uniqueId","_MatDialogBase","openDialogs","_parentDialog","_openDialogsAtThisLevel","_afterOpenedAtThisLevel","_getAfterAllClosed","parent","_afterAllClosedAtThisLevel","_overlay","injector","_defaultOptions","_overlayContainer","scrollStrategy","_dialogRefConstructor","_dialogContainerType","_dialogDataToken","_idPrefix","dialogConfigClass","afterAllClosed","_scrollStrategy","_dialog","get","open","componentOrTemplateRef","dialogRef","cdkRef","global","closeOnDestroy","closeOnOverlayDetachments","container","providers","useValue","templateContext","cdkConfig","dialogContainer","componentRef","push","index","indexOf","splice","closeAll","_closeDialogs","getDialogById","find","dialog","dialogs","i","_class3","_class3_Factory","ɵɵinvalidFactory","ɵprov","ɵɵdefineInjectable","token","factory","Injector","OverlayContainer","Type","MatDialog","location","defaultOptions","parentDialog","overlayContainer","animationMode","_class4","_class4_Factory","ɵɵinject","Location","dialogElementUid","MatDialogClose","ngOnInit","getClosestDialog","ngOnChanges","changes","proxiedChange","currentValue","_onButtonClick","screenX","screenY","_class5","_class5_Factory","ɵdir","ɵɵdefineDirective","_class5_HostBindings","ɵɵlistener","_class5_click_HostBindingHandler","$event","inputs","_matDialogClose","exportAs","ɵɵNgOnChangesFeature","MatDialogTitle","_dialogRef","queue","_class6","_class6_Factory","_class6_HostBindings","MatDialogContent","_class7","_class7_Factory","MatDialogActions","align","_class8","_class8_Factory","_class8_HostBindings","element","parentElement","contains","MatDialogModule","_class9","_class9_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","_defaultParams","params","matDialogAnimations","opacity","transform","optional"],"sources":["C:/Users/nohad/OneDrive/Documents/INFO_4/CPOO/cpoo-menfaa-doaif/cpoo-menfaa-doaif-version-pr-finale4/client/node_modules/@angular/material/fesm2022/dialog.mjs"],"sourcesContent":["import * as i1$1 from '@angular/cdk/overlay';\r\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\r\nimport * as i2 from '@angular/common';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport * as i0 from '@angular/core';\r\nimport { EventEmitter, Component, Optional, Inject, ViewEncapsulation, ChangeDetectionStrategy, InjectionToken, Injectable, ANIMATION_MODULE_TYPE as ANIMATION_MODULE_TYPE$1, SkipSelf, Directive, Input, NgModule } from '@angular/core';\r\nimport * as i1 from '@angular/cdk/a11y';\r\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\r\nimport { CdkDialogContainer, Dialog, DialogConfig, DialogModule } from '@angular/cdk/dialog';\r\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\r\nimport * as i4 from '@angular/cdk/portal';\r\nimport { PortalModule } from '@angular/cdk/portal';\r\nimport { Subject, merge, defer } from 'rxjs';\r\nimport { filter, take, startWith } from 'rxjs/operators';\r\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\r\nimport { MatCommonModule } from '@angular/material/core';\r\nimport { trigger, state, style, transition, group, animate, query, animateChild } from '@angular/animations';\r\n\r\n/**\r\n * Configuration for opening a modal dialog with the MatDialog service.\r\n */\r\nclass MatDialogConfig {\r\n    constructor() {\r\n        /** The ARIA role of the dialog element. */\r\n        this.role = 'dialog';\r\n        /** Custom class for the overlay pane. */\r\n        this.panelClass = '';\r\n        /** Whether the dialog has a backdrop. */\r\n        this.hasBackdrop = true;\r\n        /** Custom class for the backdrop. */\r\n        this.backdropClass = '';\r\n        /** Whether the user can use escape or clicking on the backdrop to close the modal. */\r\n        this.disableClose = false;\r\n        /** Width of the dialog. */\r\n        this.width = '';\r\n        /** Height of the dialog. */\r\n        this.height = '';\r\n        /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\r\n        this.maxWidth = '80vw';\r\n        /** Data being injected into the child component. */\r\n        this.data = null;\r\n        /** ID of the element that describes the dialog. */\r\n        this.ariaDescribedBy = null;\r\n        /** ID of the element that labels the dialog. */\r\n        this.ariaLabelledBy = null;\r\n        /** Aria label to assign to the dialog element. */\r\n        this.ariaLabel = null;\r\n        /** Whether this is a modal dialog. Used to set the `aria-modal` attribute. */\r\n        this.ariaModal = true;\r\n        /**\r\n         * Where the dialog should focus on open.\r\n         * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\r\n         * AutoFocusTarget instead.\r\n         */\r\n        this.autoFocus = 'first-tabbable';\r\n        /**\r\n         * Whether the dialog should restore focus to the\r\n         * previously-focused element, after it's closed.\r\n         */\r\n        this.restoreFocus = true;\r\n        /** Whether to wait for the opening animation to finish before trapping focus. */\r\n        this.delayFocusTrap = true;\r\n        /**\r\n         * Whether the dialog should close when the user goes backwards/forwards in history.\r\n         * Note that this usually doesn't include clicking on links (unless the user is using\r\n         * the `HashLocationStrategy`).\r\n         */\r\n        this.closeOnNavigation = true;\r\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\r\n    }\r\n}\r\n\r\n/** Class added when the dialog is open. */\r\nconst OPEN_CLASS = 'mdc-dialog--open';\r\n/** Class added while the dialog is opening. */\r\nconst OPENING_CLASS = 'mdc-dialog--opening';\r\n/** Class added while the dialog is closing. */\r\nconst CLOSING_CLASS = 'mdc-dialog--closing';\r\n/** Duration of the opening animation in milliseconds. */\r\nconst OPEN_ANIMATION_DURATION = 150;\r\n/** Duration of the closing animation in milliseconds. */\r\nconst CLOSE_ANIMATION_DURATION = 75;\r\n/**\r\n * Base class for the `MatDialogContainer`. The base class does not implement\r\n * animations as these are left to implementers of the dialog container.\r\n */\r\n// tslint:disable-next-line:validate-decorators\r\nclass _MatDialogContainerBase extends CdkDialogContainer {\r\n    constructor(elementRef, focusTrapFactory, _document, dialogConfig, interactivityChecker, ngZone, overlayRef, focusMonitor) {\r\n        super(elementRef, focusTrapFactory, _document, dialogConfig, interactivityChecker, ngZone, overlayRef, focusMonitor);\r\n        /** Emits when an animation state changes. */\r\n        this._animationStateChanged = new EventEmitter();\r\n    }\r\n    _captureInitialFocus() {\r\n        if (!this._config.delayFocusTrap) {\r\n            this._trapFocus();\r\n        }\r\n    }\r\n    /**\r\n     * Callback for when the open dialog animation has finished. Intended to\r\n     * be called by sub-classes that use different animation implementations.\r\n     */\r\n    _openAnimationDone(totalTime) {\r\n        if (this._config.delayFocusTrap) {\r\n            this._trapFocus();\r\n        }\r\n        this._animationStateChanged.next({ state: 'opened', totalTime });\r\n    }\r\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatDialogContainerBase, deps: [{ token: i0.ElementRef }, { token: i1.FocusTrapFactory }, { token: DOCUMENT, optional: true }, { token: MatDialogConfig }, { token: i1.InteractivityChecker }, { token: i0.NgZone }, { token: i1$1.OverlayRef }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component }); }\r\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: _MatDialogContainerBase, selector: \"ng-component\", usesInheritance: true, ngImport: i0, template: '', isInline: true }); }\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatDialogContainerBase, decorators: [{\r\n            type: Component,\r\n            args: [{ template: '' }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.FocusTrapFactory }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [DOCUMENT]\r\n                }] }, { type: MatDialogConfig }, { type: i1.InteractivityChecker }, { type: i0.NgZone }, { type: i1$1.OverlayRef }, { type: i1.FocusMonitor }]; } });\r\nconst TRANSITION_DURATION_PROPERTY = '--mat-dialog-transition-duration';\r\n// TODO(mmalerba): Remove this function after animation durations are required\r\n//  to be numbers.\r\n/**\r\n * Converts a CSS time string to a number in ms. If the given time is already a\r\n * number, it is assumed to be in ms.\r\n */\r\nfunction parseCssTime(time) {\r\n    if (time == null) {\r\n        return null;\r\n    }\r\n    if (typeof time === 'number') {\r\n        return time;\r\n    }\r\n    if (time.endsWith('ms')) {\r\n        return coerceNumberProperty(time.substring(0, time.length - 2));\r\n    }\r\n    if (time.endsWith('s')) {\r\n        return coerceNumberProperty(time.substring(0, time.length - 1)) * 1000;\r\n    }\r\n    if (time === '0') {\r\n        return 0;\r\n    }\r\n    return null; // anything else is invalid.\r\n}\r\n/**\r\n * Internal component that wraps user-provided dialog content in a MDC dialog.\r\n * @docs-private\r\n */\r\nclass MatDialogContainer extends _MatDialogContainerBase {\r\n    constructor(elementRef, focusTrapFactory, document, dialogConfig, checker, ngZone, overlayRef, _animationMode, focusMonitor) {\r\n        super(elementRef, focusTrapFactory, document, dialogConfig, checker, ngZone, overlayRef, focusMonitor);\r\n        this._animationMode = _animationMode;\r\n        /** Whether animations are enabled. */\r\n        this._animationsEnabled = this._animationMode !== 'NoopAnimations';\r\n        /** Host element of the dialog container component. */\r\n        this._hostElement = this._elementRef.nativeElement;\r\n        /** Duration of the dialog open animation. */\r\n        this._enterAnimationDuration = this._animationsEnabled\r\n            ? parseCssTime(this._config.enterAnimationDuration) ?? OPEN_ANIMATION_DURATION\r\n            : 0;\r\n        /** Duration of the dialog close animation. */\r\n        this._exitAnimationDuration = this._animationsEnabled\r\n            ? parseCssTime(this._config.exitAnimationDuration) ?? CLOSE_ANIMATION_DURATION\r\n            : 0;\r\n        /** Current timer for dialog animations. */\r\n        this._animationTimer = null;\r\n        /**\r\n         * Completes the dialog open by clearing potential animation classes, trapping\r\n         * focus and emitting an opened event.\r\n         */\r\n        this._finishDialogOpen = () => {\r\n            this._clearAnimationClasses();\r\n            this._openAnimationDone(this._enterAnimationDuration);\r\n        };\r\n        /**\r\n         * Completes the dialog close by clearing potential animation classes, restoring\r\n         * focus and emitting a closed event.\r\n         */\r\n        this._finishDialogClose = () => {\r\n            this._clearAnimationClasses();\r\n            this._animationStateChanged.emit({ state: 'closed', totalTime: this._exitAnimationDuration });\r\n        };\r\n    }\r\n    _contentAttached() {\r\n        // Delegate to the original dialog-container initialization (i.e. saving the\r\n        // previous element, setting up the focus trap and moving focus to the container).\r\n        super._contentAttached();\r\n        // Note: Usually we would be able to use the MDC dialog foundation here to handle\r\n        // the dialog animation for us, but there are a few reasons why we just leverage\r\n        // their styles and not use the runtime foundation code:\r\n        //   1. Foundation does not allow us to disable animations.\r\n        //   2. Foundation contains unnecessary features we don't need and aren't\r\n        //      tree-shakeable. e.g. background scrim, keyboard event handlers for ESC button.\r\n        //   3. Foundation uses unnecessary timers for animations to work around limitations\r\n        //      in React's `setState` mechanism.\r\n        //      https://github.com/material-components/material-components-web/pull/3682.\r\n        this._startOpenAnimation();\r\n    }\r\n    ngOnDestroy() {\r\n        super.ngOnDestroy();\r\n        if (this._animationTimer !== null) {\r\n            clearTimeout(this._animationTimer);\r\n        }\r\n    }\r\n    /** Starts the dialog open animation if enabled. */\r\n    _startOpenAnimation() {\r\n        this._animationStateChanged.emit({ state: 'opening', totalTime: this._enterAnimationDuration });\r\n        if (this._animationsEnabled) {\r\n            this._hostElement.style.setProperty(TRANSITION_DURATION_PROPERTY, `${this._enterAnimationDuration}ms`);\r\n            // We need to give the `setProperty` call from above some time to be applied.\r\n            // One would expect that the open class is added once the animation finished, but MDC\r\n            // uses the open class in combination with the opening class to start the animation.\r\n            this._requestAnimationFrame(() => this._hostElement.classList.add(OPENING_CLASS, OPEN_CLASS));\r\n            this._waitForAnimationToComplete(this._enterAnimationDuration, this._finishDialogOpen);\r\n        }\r\n        else {\r\n            this._hostElement.classList.add(OPEN_CLASS);\r\n            // Note: We could immediately finish the dialog opening here with noop animations,\r\n            // but we defer until next tick so that consumers can subscribe to `afterOpened`.\r\n            // Executing this immediately would mean that `afterOpened` emits synchronously\r\n            // on `dialog.open` before the consumer had a change to subscribe to `afterOpened`.\r\n            Promise.resolve().then(() => this._finishDialogOpen());\r\n        }\r\n    }\r\n    /**\r\n     * Starts the exit animation of the dialog if enabled. This method is\r\n     * called by the dialog ref.\r\n     */\r\n    _startExitAnimation() {\r\n        this._animationStateChanged.emit({ state: 'closing', totalTime: this._exitAnimationDuration });\r\n        this._hostElement.classList.remove(OPEN_CLASS);\r\n        if (this._animationsEnabled) {\r\n            this._hostElement.style.setProperty(TRANSITION_DURATION_PROPERTY, `${this._exitAnimationDuration}ms`);\r\n            // We need to give the `setProperty` call from above some time to be applied.\r\n            this._requestAnimationFrame(() => this._hostElement.classList.add(CLOSING_CLASS));\r\n            this._waitForAnimationToComplete(this._exitAnimationDuration, this._finishDialogClose);\r\n        }\r\n        else {\r\n            // This subscription to the `OverlayRef#backdropClick` observable in the `DialogRef` is\r\n            // set up before any user can subscribe to the backdrop click. The subscription triggers\r\n            // the dialog close and this method synchronously. If we'd synchronously emit the `CLOSED`\r\n            // animation state event if animations are disabled, the overlay would be disposed\r\n            // immediately and all other subscriptions to `DialogRef#backdropClick` would be silently\r\n            // skipped. We work around this by waiting with the dialog close until the next tick when\r\n            // all subscriptions have been fired as expected. This is not an ideal solution, but\r\n            // there doesn't seem to be any other good way. Alternatives that have been considered:\r\n            //   1. Deferring `DialogRef.close`. This could be a breaking change due to a new microtask.\r\n            //      Also this issue is specific to the MDC implementation where the dialog could\r\n            //      technically be closed synchronously. In the non-MDC one, Angular animations are used\r\n            //      and closing always takes at least a tick.\r\n            //   2. Ensuring that user subscriptions to `backdropClick`, `keydownEvents` in the dialog\r\n            //      ref are first. This would solve the issue, but has the risk of memory leaks and also\r\n            //      doesn't solve the case where consumers call `DialogRef.close` in their subscriptions.\r\n            // Based on the fact that this is specific to the MDC-based implementation of the dialog\r\n            // animations, the defer is applied here.\r\n            Promise.resolve().then(() => this._finishDialogClose());\r\n        }\r\n    }\r\n    /** Clears all dialog animation classes. */\r\n    _clearAnimationClasses() {\r\n        this._hostElement.classList.remove(OPENING_CLASS, CLOSING_CLASS);\r\n    }\r\n    _waitForAnimationToComplete(duration, callback) {\r\n        if (this._animationTimer !== null) {\r\n            clearTimeout(this._animationTimer);\r\n        }\r\n        // Note that we want this timer to run inside the NgZone, because we want\r\n        // the related events like `afterClosed` to be inside the zone as well.\r\n        this._animationTimer = setTimeout(callback, duration);\r\n    }\r\n    /** Runs a callback in `requestAnimationFrame`, if available. */\r\n    _requestAnimationFrame(callback) {\r\n        this._ngZone.runOutsideAngular(() => {\r\n            if (typeof requestAnimationFrame === 'function') {\r\n                requestAnimationFrame(callback);\r\n            }\r\n            else {\r\n                callback();\r\n            }\r\n        });\r\n    }\r\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatDialogContainer, deps: [{ token: i0.ElementRef }, { token: i1.FocusTrapFactory }, { token: DOCUMENT, optional: true }, { token: MatDialogConfig }, { token: i1.InteractivityChecker }, { token: i0.NgZone }, { token: i1$1.OverlayRef }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component }); }\r\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatDialogContainer, selector: \"mat-dialog-container\", host: { attributes: { \"tabindex\": \"-1\" }, properties: { \"attr.aria-modal\": \"_config.ariaModal\", \"id\": \"_config.id\", \"attr.role\": \"_config.role\", \"attr.aria-labelledby\": \"_config.ariaLabel ? null : _ariaLabelledByQueue[0]\", \"attr.aria-label\": \"_config.ariaLabel\", \"attr.aria-describedby\": \"_config.ariaDescribedBy || null\", \"class._mat-animation-noopable\": \"!_animationsEnabled\" }, classAttribute: \"mat-mdc-dialog-container mdc-dialog\" }, usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mdc-dialog__container\\\">\\n  <div class=\\\"mat-mdc-dialog-surface mdc-dialog__surface\\\">\\n    <ng-template cdkPortalOutlet></ng-template>\\n  </div>\\n</div>\\n\", styles: [\".mdc-elevation-overlay{position:absolute;border-radius:inherit;pointer-events:none;opacity:var(--mdc-elevation-overlay-opacity, 0);transition:opacity 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-dialog,.mdc-dialog__scrim{position:fixed;top:0;left:0;align-items:center;justify-content:center;box-sizing:border-box;width:100%;height:100%}.mdc-dialog{display:none;z-index:var(--mdc-dialog-z-index, 7)}.mdc-dialog .mdc-dialog__content{padding:20px 24px 20px 24px}.mdc-dialog .mdc-dialog__surface{min-width:280px}@media(max-width: 592px){.mdc-dialog .mdc-dialog__surface{max-width:calc(100vw - 32px)}}@media(min-width: 592px){.mdc-dialog .mdc-dialog__surface{max-width:560px}}.mdc-dialog .mdc-dialog__surface{max-height:calc(100% - 32px)}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-width:none}@media(max-width: 960px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:560px;width:560px}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}@media(max-width: 720px)and (max-width: 672px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:calc(100vw - 112px)}}@media(max-width: 720px)and (min-width: 672px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:560px}}@media(max-width: 720px)and (max-height: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:calc(100vh - 160px)}}@media(max-width: 720px)and (min-height: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:560px}}@media(max-width: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}@media(max-width: 720px)and (max-height: 400px),(max-width: 600px),(min-width: 720px)and (max-height: 400px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{height:100%;max-height:100vh;max-width:100vw;width:100vw;border-radius:0}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{order:-1;left:-12px}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__header{padding:0 16px 9px;justify-content:flex-start}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__title{margin-left:calc(16px - 2 * 12px)}}@media(min-width: 960px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:calc(100vw - 400px)}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}.mdc-dialog.mdc-dialog__scrim--hidden .mdc-dialog__scrim{opacity:0}.mdc-dialog__scrim{opacity:0;z-index:-1}.mdc-dialog__container{display:flex;flex-direction:row;align-items:center;justify-content:space-around;box-sizing:border-box;height:100%;transform:scale(0.8);opacity:0;pointer-events:none}.mdc-dialog__surface{position:relative;display:flex;flex-direction:column;flex-grow:0;flex-shrink:0;box-sizing:border-box;max-width:100%;max-height:100%;pointer-events:auto;overflow-y:auto;outline:0}.mdc-dialog__surface .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}[dir=rtl] .mdc-dialog__surface,.mdc-dialog__surface[dir=rtl]{text-align:right}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-dialog__surface{outline:2px solid windowText}}.mdc-dialog__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:2px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-dialog__surface::before{border-color:CanvasText}}@media screen and (-ms-high-contrast: active),screen and (-ms-high-contrast: none){.mdc-dialog__surface::before{content:none}}.mdc-dialog__title{display:block;margin-top:0;position:relative;flex-shrink:0;box-sizing:border-box;margin:0 0 1px;padding:0 24px 9px}.mdc-dialog__title::before{display:inline-block;width:0;height:40px;content:\\\"\\\";vertical-align:0}[dir=rtl] .mdc-dialog__title,.mdc-dialog__title[dir=rtl]{text-align:right}.mdc-dialog--scrollable .mdc-dialog__title{margin-bottom:1px;padding-bottom:15px}.mdc-dialog--fullscreen .mdc-dialog__header{align-items:baseline;border-bottom:1px solid rgba(0,0,0,0);display:inline-flex;justify-content:space-between;padding:0 24px 9px;z-index:1}@media screen and (forced-colors: active){.mdc-dialog--fullscreen .mdc-dialog__header{border-bottom-color:CanvasText}}.mdc-dialog--fullscreen .mdc-dialog__header .mdc-dialog__close{right:-12px}.mdc-dialog--fullscreen .mdc-dialog__title{margin-bottom:0;padding:0;border-bottom:0}.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__title{border-bottom:0;margin-bottom:0}.mdc-dialog--fullscreen .mdc-dialog__close{top:5px}.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__actions{border-top:1px solid rgba(0,0,0,0)}@media screen and (forced-colors: active){.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__actions{border-top-color:CanvasText}}.mdc-dialog--fullscreen--titleless .mdc-dialog__close{margin-top:4px}.mdc-dialog--fullscreen--titleless.mdc-dialog--scrollable .mdc-dialog__close{margin-top:0}.mdc-dialog__content{flex-grow:1;box-sizing:border-box;margin:0;overflow:auto}.mdc-dialog__content>:first-child{margin-top:0}.mdc-dialog__content>:last-child{margin-bottom:0}.mdc-dialog__title+.mdc-dialog__content,.mdc-dialog__header+.mdc-dialog__content{padding-top:0}.mdc-dialog--scrollable .mdc-dialog__title+.mdc-dialog__content{padding-top:8px;padding-bottom:8px}.mdc-dialog__content .mdc-deprecated-list:first-child:last-child{padding:6px 0 0}.mdc-dialog--scrollable .mdc-dialog__content .mdc-deprecated-list:first-child:last-child{padding:0}.mdc-dialog__actions{display:flex;position:relative;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:flex-end;box-sizing:border-box;min-height:52px;margin:0;padding:8px;border-top:1px solid rgba(0,0,0,0)}@media screen and (forced-colors: active){.mdc-dialog__actions{border-top-color:CanvasText}}.mdc-dialog--stacked .mdc-dialog__actions{flex-direction:column;align-items:flex-end}.mdc-dialog__button{margin-left:8px;margin-right:0;max-width:100%;text-align:right}[dir=rtl] .mdc-dialog__button,.mdc-dialog__button[dir=rtl]{margin-left:0;margin-right:8px}.mdc-dialog__button:first-child{margin-left:0;margin-right:0}[dir=rtl] .mdc-dialog__button:first-child,.mdc-dialog__button:first-child[dir=rtl]{margin-left:0;margin-right:0}[dir=rtl] .mdc-dialog__button,.mdc-dialog__button[dir=rtl]{text-align:left}.mdc-dialog--stacked .mdc-dialog__button:not(:first-child){margin-top:12px}.mdc-dialog--open,.mdc-dialog--opening,.mdc-dialog--closing{display:flex}.mdc-dialog--opening .mdc-dialog__scrim{transition:opacity 150ms linear}.mdc-dialog--opening .mdc-dialog__container{transition:opacity 75ms linear,transform 150ms 0ms cubic-bezier(0, 0, 0.2, 1)}.mdc-dialog--closing .mdc-dialog__scrim,.mdc-dialog--closing .mdc-dialog__container{transition:opacity 75ms linear}.mdc-dialog--closing .mdc-dialog__container{transform:none}.mdc-dialog--open .mdc-dialog__scrim{opacity:1}.mdc-dialog--open .mdc-dialog__container{transform:none;opacity:1}.mdc-dialog--open.mdc-dialog__surface-scrim--shown .mdc-dialog__surface-scrim{opacity:1}.mdc-dialog--open.mdc-dialog__surface-scrim--hiding .mdc-dialog__surface-scrim{transition:opacity 75ms linear}.mdc-dialog--open.mdc-dialog__surface-scrim--showing .mdc-dialog__surface-scrim{transition:opacity 150ms linear}.mdc-dialog__surface-scrim{display:none;opacity:0;position:absolute;width:100%;height:100%;z-index:1}.mdc-dialog__surface-scrim--shown .mdc-dialog__surface-scrim,.mdc-dialog__surface-scrim--showing .mdc-dialog__surface-scrim,.mdc-dialog__surface-scrim--hiding .mdc-dialog__surface-scrim{display:block}.mdc-dialog-scroll-lock{overflow:hidden}.mdc-dialog--no-content-padding .mdc-dialog__content{padding:0}.mdc-dialog--sheet .mdc-dialog__container .mdc-dialog__close{right:12px;top:9px;position:absolute;z-index:1}.mdc-dialog__scrim--removed{pointer-events:none}.mdc-dialog__scrim--removed .mdc-dialog__scrim,.mdc-dialog__scrim--removed .mdc-dialog__surface-scrim{display:none}.mat-mdc-dialog-content{max-height:65vh}.mat-mdc-dialog-container{position:static;display:block}.mat-mdc-dialog-container,.mat-mdc-dialog-container .mdc-dialog__container,.mat-mdc-dialog-container .mdc-dialog__surface{max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit}.mat-mdc-dialog-container .mdc-dialog__surface{display:block;width:100%;height:100%}.mat-mdc-dialog-container{--mdc-dialog-container-elevation-shadow:0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12);--mdc-dialog-container-shadow-color:#000;--mdc-dialog-container-shape:4px;--mdc-dialog-container-elevation: var(--mdc-dialog-container-elevation-shadow);outline:0}.mat-mdc-dialog-container .mdc-dialog__surface{background-color:var(--mdc-dialog-container-color, white)}.mat-mdc-dialog-container .mdc-dialog__surface{box-shadow:var(--mdc-dialog-container-elevation, 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12))}.mat-mdc-dialog-container .mdc-dialog__surface{border-radius:var(--mdc-dialog-container-shape, 4px)}.mat-mdc-dialog-container .mdc-dialog__title{font-family:var(--mdc-dialog-subhead-font, Roboto, sans-serif);line-height:var(--mdc-dialog-subhead-line-height, 1.5rem);font-size:var(--mdc-dialog-subhead-size, 1rem);font-weight:var(--mdc-dialog-subhead-weight, 400);letter-spacing:var(--mdc-dialog-subhead-tracking, 0.03125em)}.mat-mdc-dialog-container .mdc-dialog__title{color:var(--mdc-dialog-subhead-color, rgba(0, 0, 0, 0.87))}.mat-mdc-dialog-container .mdc-dialog__content{font-family:var(--mdc-dialog-supporting-text-font, Roboto, sans-serif);line-height:var(--mdc-dialog-supporting-text-line-height, 1.5rem);font-size:var(--mdc-dialog-supporting-text-size, 1rem);font-weight:var(--mdc-dialog-supporting-text-weight, 400);letter-spacing:var(--mdc-dialog-supporting-text-tracking, 0.03125em)}.mat-mdc-dialog-container .mdc-dialog__content{color:var(--mdc-dialog-supporting-text-color, rgba(0, 0, 0, 0.6))}.mat-mdc-dialog-container .mdc-dialog__container{transition-duration:var(--mat-dialog-transition-duration, 0ms)}.mat-mdc-dialog-container._mat-animation-noopable .mdc-dialog__container{transition:none}.mat-mdc-dialog-content{display:block}.mat-mdc-dialog-actions{justify-content:start}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-center,.mat-mdc-dialog-actions[align=center]{justify-content:center}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-end,.mat-mdc-dialog-actions[align=end]{justify-content:flex-end}.mat-mdc-dialog-actions .mat-button-base+.mat-button-base,.mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-mdc-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\"], dependencies: [{ kind: \"directive\", type: i4.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatDialogContainer, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'mat-dialog-container', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, host: {\r\n                        'class': 'mat-mdc-dialog-container mdc-dialog',\r\n                        'tabindex': '-1',\r\n                        '[attr.aria-modal]': '_config.ariaModal',\r\n                        '[id]': '_config.id',\r\n                        '[attr.role]': '_config.role',\r\n                        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledByQueue[0]',\r\n                        '[attr.aria-label]': '_config.ariaLabel',\r\n                        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\r\n                        '[class._mat-animation-noopable]': '!_animationsEnabled',\r\n                    }, template: \"<div class=\\\"mdc-dialog__container\\\">\\n  <div class=\\\"mat-mdc-dialog-surface mdc-dialog__surface\\\">\\n    <ng-template cdkPortalOutlet></ng-template>\\n  </div>\\n</div>\\n\", styles: [\".mdc-elevation-overlay{position:absolute;border-radius:inherit;pointer-events:none;opacity:var(--mdc-elevation-overlay-opacity, 0);transition:opacity 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-dialog,.mdc-dialog__scrim{position:fixed;top:0;left:0;align-items:center;justify-content:center;box-sizing:border-box;width:100%;height:100%}.mdc-dialog{display:none;z-index:var(--mdc-dialog-z-index, 7)}.mdc-dialog .mdc-dialog__content{padding:20px 24px 20px 24px}.mdc-dialog .mdc-dialog__surface{min-width:280px}@media(max-width: 592px){.mdc-dialog .mdc-dialog__surface{max-width:calc(100vw - 32px)}}@media(min-width: 592px){.mdc-dialog .mdc-dialog__surface{max-width:560px}}.mdc-dialog .mdc-dialog__surface{max-height:calc(100% - 32px)}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-width:none}@media(max-width: 960px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:560px;width:560px}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}@media(max-width: 720px)and (max-width: 672px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:calc(100vw - 112px)}}@media(max-width: 720px)and (min-width: 672px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:560px}}@media(max-width: 720px)and (max-height: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:calc(100vh - 160px)}}@media(max-width: 720px)and (min-height: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:560px}}@media(max-width: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}@media(max-width: 720px)and (max-height: 400px),(max-width: 600px),(min-width: 720px)and (max-height: 400px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{height:100%;max-height:100vh;max-width:100vw;width:100vw;border-radius:0}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{order:-1;left:-12px}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__header{padding:0 16px 9px;justify-content:flex-start}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__title{margin-left:calc(16px - 2 * 12px)}}@media(min-width: 960px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:calc(100vw - 400px)}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}.mdc-dialog.mdc-dialog__scrim--hidden .mdc-dialog__scrim{opacity:0}.mdc-dialog__scrim{opacity:0;z-index:-1}.mdc-dialog__container{display:flex;flex-direction:row;align-items:center;justify-content:space-around;box-sizing:border-box;height:100%;transform:scale(0.8);opacity:0;pointer-events:none}.mdc-dialog__surface{position:relative;display:flex;flex-direction:column;flex-grow:0;flex-shrink:0;box-sizing:border-box;max-width:100%;max-height:100%;pointer-events:auto;overflow-y:auto;outline:0}.mdc-dialog__surface .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}[dir=rtl] .mdc-dialog__surface,.mdc-dialog__surface[dir=rtl]{text-align:right}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-dialog__surface{outline:2px solid windowText}}.mdc-dialog__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:2px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-dialog__surface::before{border-color:CanvasText}}@media screen and (-ms-high-contrast: active),screen and (-ms-high-contrast: none){.mdc-dialog__surface::before{content:none}}.mdc-dialog__title{display:block;margin-top:0;position:relative;flex-shrink:0;box-sizing:border-box;margin:0 0 1px;padding:0 24px 9px}.mdc-dialog__title::before{display:inline-block;width:0;height:40px;content:\\\"\\\";vertical-align:0}[dir=rtl] .mdc-dialog__title,.mdc-dialog__title[dir=rtl]{text-align:right}.mdc-dialog--scrollable .mdc-dialog__title{margin-bottom:1px;padding-bottom:15px}.mdc-dialog--fullscreen .mdc-dialog__header{align-items:baseline;border-bottom:1px solid rgba(0,0,0,0);display:inline-flex;justify-content:space-between;padding:0 24px 9px;z-index:1}@media screen and (forced-colors: active){.mdc-dialog--fullscreen .mdc-dialog__header{border-bottom-color:CanvasText}}.mdc-dialog--fullscreen .mdc-dialog__header .mdc-dialog__close{right:-12px}.mdc-dialog--fullscreen .mdc-dialog__title{margin-bottom:0;padding:0;border-bottom:0}.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__title{border-bottom:0;margin-bottom:0}.mdc-dialog--fullscreen .mdc-dialog__close{top:5px}.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__actions{border-top:1px solid rgba(0,0,0,0)}@media screen and (forced-colors: active){.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__actions{border-top-color:CanvasText}}.mdc-dialog--fullscreen--titleless .mdc-dialog__close{margin-top:4px}.mdc-dialog--fullscreen--titleless.mdc-dialog--scrollable .mdc-dialog__close{margin-top:0}.mdc-dialog__content{flex-grow:1;box-sizing:border-box;margin:0;overflow:auto}.mdc-dialog__content>:first-child{margin-top:0}.mdc-dialog__content>:last-child{margin-bottom:0}.mdc-dialog__title+.mdc-dialog__content,.mdc-dialog__header+.mdc-dialog__content{padding-top:0}.mdc-dialog--scrollable .mdc-dialog__title+.mdc-dialog__content{padding-top:8px;padding-bottom:8px}.mdc-dialog__content .mdc-deprecated-list:first-child:last-child{padding:6px 0 0}.mdc-dialog--scrollable .mdc-dialog__content .mdc-deprecated-list:first-child:last-child{padding:0}.mdc-dialog__actions{display:flex;position:relative;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:flex-end;box-sizing:border-box;min-height:52px;margin:0;padding:8px;border-top:1px solid rgba(0,0,0,0)}@media screen and (forced-colors: active){.mdc-dialog__actions{border-top-color:CanvasText}}.mdc-dialog--stacked .mdc-dialog__actions{flex-direction:column;align-items:flex-end}.mdc-dialog__button{margin-left:8px;margin-right:0;max-width:100%;text-align:right}[dir=rtl] .mdc-dialog__button,.mdc-dialog__button[dir=rtl]{margin-left:0;margin-right:8px}.mdc-dialog__button:first-child{margin-left:0;margin-right:0}[dir=rtl] .mdc-dialog__button:first-child,.mdc-dialog__button:first-child[dir=rtl]{margin-left:0;margin-right:0}[dir=rtl] .mdc-dialog__button,.mdc-dialog__button[dir=rtl]{text-align:left}.mdc-dialog--stacked .mdc-dialog__button:not(:first-child){margin-top:12px}.mdc-dialog--open,.mdc-dialog--opening,.mdc-dialog--closing{display:flex}.mdc-dialog--opening .mdc-dialog__scrim{transition:opacity 150ms linear}.mdc-dialog--opening .mdc-dialog__container{transition:opacity 75ms linear,transform 150ms 0ms cubic-bezier(0, 0, 0.2, 1)}.mdc-dialog--closing .mdc-dialog__scrim,.mdc-dialog--closing .mdc-dialog__container{transition:opacity 75ms linear}.mdc-dialog--closing .mdc-dialog__container{transform:none}.mdc-dialog--open .mdc-dialog__scrim{opacity:1}.mdc-dialog--open .mdc-dialog__container{transform:none;opacity:1}.mdc-dialog--open.mdc-dialog__surface-scrim--shown .mdc-dialog__surface-scrim{opacity:1}.mdc-dialog--open.mdc-dialog__surface-scrim--hiding .mdc-dialog__surface-scrim{transition:opacity 75ms linear}.mdc-dialog--open.mdc-dialog__surface-scrim--showing .mdc-dialog__surface-scrim{transition:opacity 150ms linear}.mdc-dialog__surface-scrim{display:none;opacity:0;position:absolute;width:100%;height:100%;z-index:1}.mdc-dialog__surface-scrim--shown .mdc-dialog__surface-scrim,.mdc-dialog__surface-scrim--showing .mdc-dialog__surface-scrim,.mdc-dialog__surface-scrim--hiding .mdc-dialog__surface-scrim{display:block}.mdc-dialog-scroll-lock{overflow:hidden}.mdc-dialog--no-content-padding .mdc-dialog__content{padding:0}.mdc-dialog--sheet .mdc-dialog__container .mdc-dialog__close{right:12px;top:9px;position:absolute;z-index:1}.mdc-dialog__scrim--removed{pointer-events:none}.mdc-dialog__scrim--removed .mdc-dialog__scrim,.mdc-dialog__scrim--removed .mdc-dialog__surface-scrim{display:none}.mat-mdc-dialog-content{max-height:65vh}.mat-mdc-dialog-container{position:static;display:block}.mat-mdc-dialog-container,.mat-mdc-dialog-container .mdc-dialog__container,.mat-mdc-dialog-container .mdc-dialog__surface{max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit}.mat-mdc-dialog-container .mdc-dialog__surface{display:block;width:100%;height:100%}.mat-mdc-dialog-container{--mdc-dialog-container-elevation-shadow:0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12);--mdc-dialog-container-shadow-color:#000;--mdc-dialog-container-shape:4px;--mdc-dialog-container-elevation: var(--mdc-dialog-container-elevation-shadow);outline:0}.mat-mdc-dialog-container .mdc-dialog__surface{background-color:var(--mdc-dialog-container-color, white)}.mat-mdc-dialog-container .mdc-dialog__surface{box-shadow:var(--mdc-dialog-container-elevation, 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12))}.mat-mdc-dialog-container .mdc-dialog__surface{border-radius:var(--mdc-dialog-container-shape, 4px)}.mat-mdc-dialog-container .mdc-dialog__title{font-family:var(--mdc-dialog-subhead-font, Roboto, sans-serif);line-height:var(--mdc-dialog-subhead-line-height, 1.5rem);font-size:var(--mdc-dialog-subhead-size, 1rem);font-weight:var(--mdc-dialog-subhead-weight, 400);letter-spacing:var(--mdc-dialog-subhead-tracking, 0.03125em)}.mat-mdc-dialog-container .mdc-dialog__title{color:var(--mdc-dialog-subhead-color, rgba(0, 0, 0, 0.87))}.mat-mdc-dialog-container .mdc-dialog__content{font-family:var(--mdc-dialog-supporting-text-font, Roboto, sans-serif);line-height:var(--mdc-dialog-supporting-text-line-height, 1.5rem);font-size:var(--mdc-dialog-supporting-text-size, 1rem);font-weight:var(--mdc-dialog-supporting-text-weight, 400);letter-spacing:var(--mdc-dialog-supporting-text-tracking, 0.03125em)}.mat-mdc-dialog-container .mdc-dialog__content{color:var(--mdc-dialog-supporting-text-color, rgba(0, 0, 0, 0.6))}.mat-mdc-dialog-container .mdc-dialog__container{transition-duration:var(--mat-dialog-transition-duration, 0ms)}.mat-mdc-dialog-container._mat-animation-noopable .mdc-dialog__container{transition:none}.mat-mdc-dialog-content{display:block}.mat-mdc-dialog-actions{justify-content:start}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-center,.mat-mdc-dialog-actions[align=center]{justify-content:center}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-end,.mat-mdc-dialog-actions[align=end]{justify-content:flex-end}.mat-mdc-dialog-actions .mat-button-base+.mat-button-base,.mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-mdc-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\"] }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.FocusTrapFactory }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [DOCUMENT]\r\n                }] }, { type: MatDialogConfig }, { type: i1.InteractivityChecker }, { type: i0.NgZone }, { type: i1$1.OverlayRef }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [ANIMATION_MODULE_TYPE]\r\n                }] }, { type: i1.FocusMonitor }]; } });\r\n\r\n/**\r\n * Reference to a dialog opened via the MatDialog service.\r\n */\r\nclass MatDialogRef {\r\n    constructor(_ref, config, _containerInstance) {\r\n        this._ref = _ref;\r\n        this._containerInstance = _containerInstance;\r\n        /** Subject for notifying the user that the dialog has finished opening. */\r\n        this._afterOpened = new Subject();\r\n        /** Subject for notifying the user that the dialog has started closing. */\r\n        this._beforeClosed = new Subject();\r\n        /** Current state of the dialog. */\r\n        this._state = 0 /* MatDialogState.OPEN */;\r\n        this.disableClose = config.disableClose;\r\n        this.id = _ref.id;\r\n        // Emit when opening animation completes\r\n        _containerInstance._animationStateChanged\r\n            .pipe(filter(event => event.state === 'opened'), take(1))\r\n            .subscribe(() => {\r\n            this._afterOpened.next();\r\n            this._afterOpened.complete();\r\n        });\r\n        // Dispose overlay when closing animation is complete\r\n        _containerInstance._animationStateChanged\r\n            .pipe(filter(event => event.state === 'closed'), take(1))\r\n            .subscribe(() => {\r\n            clearTimeout(this._closeFallbackTimeout);\r\n            this._finishDialogClose();\r\n        });\r\n        _ref.overlayRef.detachments().subscribe(() => {\r\n            this._beforeClosed.next(this._result);\r\n            this._beforeClosed.complete();\r\n            this._finishDialogClose();\r\n        });\r\n        merge(this.backdropClick(), this.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)))).subscribe(event => {\r\n            if (!this.disableClose) {\r\n                event.preventDefault();\r\n                _closeDialogVia(this, event.type === 'keydown' ? 'keyboard' : 'mouse');\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Close the dialog.\r\n     * @param dialogResult Optional result to return to the dialog opener.\r\n     */\r\n    close(dialogResult) {\r\n        this._result = dialogResult;\r\n        // Transition the backdrop in parallel to the dialog.\r\n        this._containerInstance._animationStateChanged\r\n            .pipe(filter(event => event.state === 'closing'), take(1))\r\n            .subscribe(event => {\r\n            this._beforeClosed.next(dialogResult);\r\n            this._beforeClosed.complete();\r\n            this._ref.overlayRef.detachBackdrop();\r\n            // The logic that disposes of the overlay depends on the exit animation completing, however\r\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\r\n            // timeout which will clean everything up if the animation hasn't fired within the specified\r\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\r\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\r\n            this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\r\n        });\r\n        this._state = 1 /* MatDialogState.CLOSING */;\r\n        this._containerInstance._startExitAnimation();\r\n    }\r\n    /**\r\n     * Gets an observable that is notified when the dialog is finished opening.\r\n     */\r\n    afterOpened() {\r\n        return this._afterOpened;\r\n    }\r\n    /**\r\n     * Gets an observable that is notified when the dialog is finished closing.\r\n     */\r\n    afterClosed() {\r\n        return this._ref.closed;\r\n    }\r\n    /**\r\n     * Gets an observable that is notified when the dialog has started closing.\r\n     */\r\n    beforeClosed() {\r\n        return this._beforeClosed;\r\n    }\r\n    /**\r\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\r\n     */\r\n    backdropClick() {\r\n        return this._ref.backdropClick;\r\n    }\r\n    /**\r\n     * Gets an observable that emits when keydown events are targeted on the overlay.\r\n     */\r\n    keydownEvents() {\r\n        return this._ref.keydownEvents;\r\n    }\r\n    /**\r\n     * Updates the dialog's position.\r\n     * @param position New dialog position.\r\n     */\r\n    updatePosition(position) {\r\n        let strategy = this._ref.config.positionStrategy;\r\n        if (position && (position.left || position.right)) {\r\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\r\n        }\r\n        else {\r\n            strategy.centerHorizontally();\r\n        }\r\n        if (position && (position.top || position.bottom)) {\r\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\r\n        }\r\n        else {\r\n            strategy.centerVertically();\r\n        }\r\n        this._ref.updatePosition();\r\n        return this;\r\n    }\r\n    /**\r\n     * Updates the dialog's width and height.\r\n     * @param width New width of the dialog.\r\n     * @param height New height of the dialog.\r\n     */\r\n    updateSize(width = '', height = '') {\r\n        this._ref.updateSize(width, height);\r\n        return this;\r\n    }\r\n    /** Add a CSS class or an array of classes to the overlay pane. */\r\n    addPanelClass(classes) {\r\n        this._ref.addPanelClass(classes);\r\n        return this;\r\n    }\r\n    /** Remove a CSS class or an array of classes from the overlay pane. */\r\n    removePanelClass(classes) {\r\n        this._ref.removePanelClass(classes);\r\n        return this;\r\n    }\r\n    /** Gets the current state of the dialog's lifecycle. */\r\n    getState() {\r\n        return this._state;\r\n    }\r\n    /**\r\n     * Finishes the dialog close by updating the state of the dialog\r\n     * and disposing the overlay.\r\n     */\r\n    _finishDialogClose() {\r\n        this._state = 2 /* MatDialogState.CLOSED */;\r\n        this._ref.close(this._result, { focusOrigin: this._closeInteractionType });\r\n        this.componentInstance = null;\r\n    }\r\n}\r\n/**\r\n * Closes the dialog with the specified interaction type. This is currently not part of\r\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\r\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\r\n */\r\n// TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\r\nfunction _closeDialogVia(ref, interactionType, result) {\r\n    ref._closeInteractionType = interactionType;\r\n    return ref.close(result);\r\n}\r\n\r\n/** Injection token that can be used to access the data that was passed in to a dialog. */\r\nconst MAT_DIALOG_DATA = new InjectionToken('MatMdcDialogData');\r\n/** Injection token that can be used to specify default dialog options. */\r\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-mdc-dialog-default-options');\r\n/** Injection token that determines the scroll handling while the dialog is open. */\r\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-mdc-dialog-scroll-strategy');\r\n/** @docs-private */\r\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\r\n    return () => overlay.scrollStrategies.block();\r\n}\r\n/** @docs-private */\r\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\r\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\r\n    deps: [Overlay],\r\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\r\n/** @docs-private */\r\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\r\n    return () => overlay.scrollStrategies.block();\r\n}\r\n// Counter for unique dialog ids.\r\nlet uniqueId = 0;\r\n/**\r\n * Base class for dialog services. The base dialog service allows\r\n * for arbitrary dialog refs and dialog container components.\r\n */\r\nclass _MatDialogBase {\r\n    /** Keeps track of the currently-open dialogs. */\r\n    get openDialogs() {\r\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\r\n    }\r\n    /** Stream that emits when a dialog has been opened. */\r\n    get afterOpened() {\r\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\r\n    }\r\n    _getAfterAllClosed() {\r\n        const parent = this._parentDialog;\r\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\r\n    }\r\n    constructor(_overlay, injector, _defaultOptions, _parentDialog, \r\n    /**\r\n     * @deprecated No longer used. To be removed.\r\n     * @breaking-change 15.0.0\r\n     */\r\n    _overlayContainer, scrollStrategy, _dialogRefConstructor, _dialogContainerType, _dialogDataToken, \r\n    /**\r\n     * @deprecated No longer used. To be removed.\r\n     * @breaking-change 14.0.0\r\n     */\r\n    _animationMode) {\r\n        this._overlay = _overlay;\r\n        this._defaultOptions = _defaultOptions;\r\n        this._parentDialog = _parentDialog;\r\n        this._dialogRefConstructor = _dialogRefConstructor;\r\n        this._dialogContainerType = _dialogContainerType;\r\n        this._dialogDataToken = _dialogDataToken;\r\n        this._openDialogsAtThisLevel = [];\r\n        this._afterAllClosedAtThisLevel = new Subject();\r\n        this._afterOpenedAtThisLevel = new Subject();\r\n        this._idPrefix = 'mat-dialog-';\r\n        this.dialogConfigClass = MatDialogConfig;\r\n        /**\r\n         * Stream that emits when all open dialog have finished closing.\r\n         * Will emit on subscribe if there are no open dialogs to begin with.\r\n         */\r\n        this.afterAllClosed = defer(() => this.openDialogs.length\r\n            ? this._getAfterAllClosed()\r\n            : this._getAfterAllClosed().pipe(startWith(undefined)));\r\n        this._scrollStrategy = scrollStrategy;\r\n        this._dialog = injector.get(Dialog);\r\n    }\r\n    open(componentOrTemplateRef, config) {\r\n        let dialogRef;\r\n        config = { ...(this._defaultOptions || new MatDialogConfig()), ...config };\r\n        config.id = config.id || `${this._idPrefix}${uniqueId++}`;\r\n        config.scrollStrategy = config.scrollStrategy || this._scrollStrategy();\r\n        const cdkRef = this._dialog.open(componentOrTemplateRef, {\r\n            ...config,\r\n            positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),\r\n            // Disable closing since we need to sync it up to the animation ourselves.\r\n            disableClose: true,\r\n            // Disable closing on destroy, because this service cleans up its open dialogs as well.\r\n            // We want to do the cleanup here, rather than the CDK service, because the CDK destroys\r\n            // the dialogs immediately whereas we want it to wait for the animations to finish.\r\n            closeOnDestroy: false,\r\n            // Disable closing on detachments so that we can sync up the animation.\r\n            // The Material dialog ref handles this manually.\r\n            closeOnOverlayDetachments: false,\r\n            container: {\r\n                type: this._dialogContainerType,\r\n                providers: () => [\r\n                    // Provide our config as the CDK config as well since it has the same interface as the\r\n                    // CDK one, but it contains the actual values passed in by the user for things like\r\n                    // `disableClose` which we disable for the CDK dialog since we handle it ourselves.\r\n                    { provide: this.dialogConfigClass, useValue: config },\r\n                    { provide: DialogConfig, useValue: config },\r\n                ],\r\n            },\r\n            templateContext: () => ({ dialogRef }),\r\n            providers: (ref, cdkConfig, dialogContainer) => {\r\n                dialogRef = new this._dialogRefConstructor(ref, config, dialogContainer);\r\n                dialogRef.updatePosition(config?.position);\r\n                return [\r\n                    { provide: this._dialogContainerType, useValue: dialogContainer },\r\n                    { provide: this._dialogDataToken, useValue: cdkConfig.data },\r\n                    { provide: this._dialogRefConstructor, useValue: dialogRef },\r\n                ];\r\n            },\r\n        });\r\n        // This can't be assigned in the `providers` callback, because\r\n        // the instance hasn't been assigned to the CDK ref yet.\r\n        dialogRef.componentRef = cdkRef.componentRef;\r\n        dialogRef.componentInstance = cdkRef.componentInstance;\r\n        this.openDialogs.push(dialogRef);\r\n        this.afterOpened.next(dialogRef);\r\n        dialogRef.afterClosed().subscribe(() => {\r\n            const index = this.openDialogs.indexOf(dialogRef);\r\n            if (index > -1) {\r\n                this.openDialogs.splice(index, 1);\r\n                if (!this.openDialogs.length) {\r\n                    this._getAfterAllClosed().next();\r\n                }\r\n            }\r\n        });\r\n        return dialogRef;\r\n    }\r\n    /**\r\n     * Closes all of the currently-open dialogs.\r\n     */\r\n    closeAll() {\r\n        this._closeDialogs(this.openDialogs);\r\n    }\r\n    /**\r\n     * Finds an open dialog by its id.\r\n     * @param id ID to use when looking up the dialog.\r\n     */\r\n    getDialogById(id) {\r\n        return this.openDialogs.find(dialog => dialog.id === id);\r\n    }\r\n    ngOnDestroy() {\r\n        // Only close the dialogs at this level on destroy\r\n        // since the parent service may still be active.\r\n        this._closeDialogs(this._openDialogsAtThisLevel);\r\n        this._afterAllClosedAtThisLevel.complete();\r\n        this._afterOpenedAtThisLevel.complete();\r\n    }\r\n    _closeDialogs(dialogs) {\r\n        let i = dialogs.length;\r\n        while (i--) {\r\n            dialogs[i].close();\r\n        }\r\n    }\r\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatDialogBase, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Injectable }); }\r\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatDialogBase }); }\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatDialogBase, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: undefined }, { type: undefined }, { type: i1$1.OverlayContainer }, { type: undefined }, { type: i0.Type }, { type: i0.Type }, { type: i0.InjectionToken }, { type: undefined }]; } });\r\n/**\r\n * Service to open Material Design modal dialogs.\r\n */\r\nclass MatDialog extends _MatDialogBase {\r\n    constructor(overlay, injector, \r\n    /**\r\n     * @deprecated `_location` parameter to be removed.\r\n     * @breaking-change 10.0.0\r\n     */\r\n    location, defaultOptions, scrollStrategy, parentDialog, \r\n    /**\r\n     * @deprecated No longer used. To be removed.\r\n     * @breaking-change 15.0.0\r\n     */\r\n    overlayContainer, \r\n    /**\r\n     * @deprecated No longer used. To be removed.\r\n     * @breaking-change 14.0.0\r\n     */\r\n    animationMode) {\r\n        super(overlay, injector, defaultOptions, parentDialog, overlayContainer, scrollStrategy, MatDialogRef, MatDialogContainer, MAT_DIALOG_DATA, animationMode);\r\n        this._idPrefix = 'mat-mdc-dialog-';\r\n    }\r\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatDialog, deps: [{ token: i1$1.Overlay }, { token: i0.Injector }, { token: i2.Location, optional: true }, { token: MAT_DIALOG_DEFAULT_OPTIONS, optional: true }, { token: MAT_DIALOG_SCROLL_STRATEGY }, { token: MatDialog, optional: true, skipSelf: true }, { token: i1$1.OverlayContainer }, { token: ANIMATION_MODULE_TYPE$1, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\r\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatDialog }); }\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatDialog, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: i2.Location, decorators: [{\r\n                    type: Optional\r\n                }] }, { type: MatDialogConfig, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [MAT_DIALOG_DEFAULT_OPTIONS]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [MAT_DIALOG_SCROLL_STRATEGY]\r\n                }] }, { type: MatDialog, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: SkipSelf\r\n                }] }, { type: i1$1.OverlayContainer }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [ANIMATION_MODULE_TYPE$1]\r\n                }] }]; } });\r\n\r\n/** Counter used to generate unique IDs for dialog elements. */\r\nlet dialogElementUid = 0;\r\n/**\r\n * Button that will close the current dialog.\r\n */\r\nclass MatDialogClose {\r\n    constructor(\r\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\r\n    // tslint:disable-next-line: lightweight-tokens\r\n    dialogRef, _elementRef, _dialog) {\r\n        this.dialogRef = dialogRef;\r\n        this._elementRef = _elementRef;\r\n        this._dialog = _dialog;\r\n        /** Default to \"button\" to prevents accidental form submits. */\r\n        this.type = 'button';\r\n    }\r\n    ngOnInit() {\r\n        if (!this.dialogRef) {\r\n            // When this directive is included in a dialog via TemplateRef (rather than being\r\n            // in a Component), the DialogRef isn't available via injection because embedded\r\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\r\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\r\n            // be resolved at constructor time.\r\n            this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\r\n        }\r\n    }\r\n    ngOnChanges(changes) {\r\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\r\n        if (proxiedChange) {\r\n            this.dialogResult = proxiedChange.currentValue;\r\n        }\r\n    }\r\n    _onButtonClick(event) {\r\n        // Determinate the focus origin using the click event, because using the FocusMonitor will\r\n        // result in incorrect origins. Most of the time, close buttons will be auto focused in the\r\n        // dialog, and therefore clicking the button won't result in a focus change. This means that\r\n        // the FocusMonitor won't detect any origin change, and will always output `program`.\r\n        _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\r\n    }\r\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatDialogClose, deps: [{ token: MatDialogRef, optional: true }, { token: i0.ElementRef }, { token: MatDialog }], target: i0.ɵɵFactoryTarget.Directive }); }\r\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatDialogClose, selector: \"[mat-dialog-close], [matDialogClose]\", inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, host: { listeners: { \"click\": \"_onButtonClick($event)\" }, properties: { \"attr.aria-label\": \"ariaLabel || null\", \"attr.type\": \"type\" } }, exportAs: [\"matDialogClose\"], usesOnChanges: true, ngImport: i0 }); }\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatDialogClose, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[mat-dialog-close], [matDialogClose]',\r\n                    exportAs: 'matDialogClose',\r\n                    host: {\r\n                        '(click)': '_onButtonClick($event)',\r\n                        '[attr.aria-label]': 'ariaLabel || null',\r\n                        '[attr.type]': 'type',\r\n                    },\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: MatDialogRef, decorators: [{\r\n                    type: Optional\r\n                }] }, { type: i0.ElementRef }, { type: MatDialog }]; }, propDecorators: { ariaLabel: [{\r\n                type: Input,\r\n                args: ['aria-label']\r\n            }], type: [{\r\n                type: Input\r\n            }], dialogResult: [{\r\n                type: Input,\r\n                args: ['mat-dialog-close']\r\n            }], _matDialogClose: [{\r\n                type: Input,\r\n                args: ['matDialogClose']\r\n            }] } });\r\n/**\r\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\r\n */\r\nclass MatDialogTitle {\r\n    constructor(\r\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\r\n    // tslint:disable-next-line: lightweight-tokens\r\n    _dialogRef, _elementRef, _dialog) {\r\n        this._dialogRef = _dialogRef;\r\n        this._elementRef = _elementRef;\r\n        this._dialog = _dialog;\r\n        this.id = `mat-mdc-dialog-title-${dialogElementUid++}`;\r\n    }\r\n    ngOnInit() {\r\n        if (!this._dialogRef) {\r\n            this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\r\n        }\r\n        if (this._dialogRef) {\r\n            Promise.resolve().then(() => {\r\n                // Note: we null check the queue, because there are some internal\r\n                // tests that are mocking out `MatDialogRef` incorrectly.\r\n                this._dialogRef._containerInstance?._ariaLabelledByQueue?.push(this.id);\r\n            });\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        // Note: we null check the queue, because there are some internal\r\n        // tests that are mocking out `MatDialogRef` incorrectly.\r\n        const queue = this._dialogRef?._containerInstance?._ariaLabelledByQueue;\r\n        if (queue) {\r\n            Promise.resolve().then(() => {\r\n                const index = queue.indexOf(this.id);\r\n                if (index > -1) {\r\n                    queue.splice(index, 1);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatDialogTitle, deps: [{ token: MatDialogRef, optional: true }, { token: i0.ElementRef }, { token: MatDialog }], target: i0.ɵɵFactoryTarget.Directive }); }\r\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatDialogTitle, selector: \"[mat-dialog-title], [matDialogTitle]\", inputs: { id: \"id\" }, host: { properties: { \"id\": \"id\" }, classAttribute: \"mat-mdc-dialog-title mdc-dialog__title\" }, exportAs: [\"matDialogTitle\"], ngImport: i0 }); }\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatDialogTitle, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[mat-dialog-title], [matDialogTitle]',\r\n                    exportAs: 'matDialogTitle',\r\n                    host: {\r\n                        'class': 'mat-mdc-dialog-title mdc-dialog__title',\r\n                        '[id]': 'id',\r\n                    },\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: MatDialogRef, decorators: [{\r\n                    type: Optional\r\n                }] }, { type: i0.ElementRef }, { type: MatDialog }]; }, propDecorators: { id: [{\r\n                type: Input\r\n            }] } });\r\n/**\r\n * Scrollable content container of a dialog.\r\n */\r\nclass MatDialogContent {\r\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatDialogContent, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\r\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatDialogContent, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\", host: { classAttribute: \"mat-mdc-dialog-content mdc-dialog__content\" }, ngImport: i0 }); }\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatDialogContent, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\r\n                    host: { 'class': 'mat-mdc-dialog-content mdc-dialog__content' },\r\n                }]\r\n        }] });\r\n/**\r\n * Container for the bottom action buttons in a dialog.\r\n * Stays fixed to the bottom when scrolling.\r\n */\r\nclass MatDialogActions {\r\n    constructor() {\r\n        /**\r\n         * Horizontal alignment of action buttons.\r\n         */\r\n        this.align = 'start';\r\n    }\r\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatDialogActions, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\r\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatDialogActions, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\", inputs: { align: \"align\" }, host: { properties: { \"class.mat-mdc-dialog-actions-align-center\": \"align === \\\"center\\\"\", \"class.mat-mdc-dialog-actions-align-end\": \"align === \\\"end\\\"\" }, classAttribute: \"mat-mdc-dialog-actions mdc-dialog__actions\" }, ngImport: i0 }); }\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatDialogActions, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\r\n                    host: {\r\n                        'class': 'mat-mdc-dialog-actions mdc-dialog__actions',\r\n                        '[class.mat-mdc-dialog-actions-align-center]': 'align === \"center\"',\r\n                        '[class.mat-mdc-dialog-actions-align-end]': 'align === \"end\"',\r\n                    },\r\n                }]\r\n        }], propDecorators: { align: [{\r\n                type: Input\r\n            }] } });\r\n/**\r\n * Finds the closest MatDialogRef to an element by looking at the DOM.\r\n * @param element Element relative to which to look for a dialog.\r\n * @param openDialogs References to the currently-open dialogs.\r\n */\r\nfunction getClosestDialog(element, openDialogs) {\r\n    let parent = element.nativeElement.parentElement;\r\n    while (parent && !parent.classList.contains('mat-mdc-dialog-container')) {\r\n        parent = parent.parentElement;\r\n    }\r\n    return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\r\n}\r\n\r\nclass MatDialogModule {\r\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatDialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\r\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: MatDialogModule, declarations: [MatDialogContainer,\r\n            MatDialogClose,\r\n            MatDialogTitle,\r\n            MatDialogActions,\r\n            MatDialogContent], imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule], exports: [MatDialogContainer,\r\n            MatDialogClose,\r\n            MatDialogTitle,\r\n            MatDialogContent,\r\n            MatDialogActions,\r\n            MatCommonModule] }); }\r\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatDialogModule, providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER], imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, MatCommonModule] }); }\r\n}\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatDialogModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule],\r\n                    exports: [\r\n                        MatDialogContainer,\r\n                        MatDialogClose,\r\n                        MatDialogTitle,\r\n                        MatDialogContent,\r\n                        MatDialogActions,\r\n                        MatCommonModule,\r\n                    ],\r\n                    declarations: [\r\n                        MatDialogContainer,\r\n                        MatDialogClose,\r\n                        MatDialogTitle,\r\n                        MatDialogActions,\r\n                        MatDialogContent,\r\n                    ],\r\n                    providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\r\n                }]\r\n        }] });\r\n\r\n/**\r\n * Default parameters for the animation for backwards compatibility.\r\n * @docs-private\r\n */\r\nconst _defaultParams = {\r\n    params: { enterAnimationDuration: '150ms', exitAnimationDuration: '75ms' },\r\n};\r\n/**\r\n * Animations used by MatDialog.\r\n * @docs-private\r\n */\r\nconst matDialogAnimations = {\r\n    /** Animation that is applied on the dialog container by default. */\r\n    dialogContainer: trigger('dialogContainer', [\r\n        // Note: The `enter` animation transitions to `transform: none`, because for some reason\r\n        // specifying the transform explicitly, causes IE both to blur the dialog content and\r\n        // decimate the animation performance. Leaving it as `none` solves both issues.\r\n        state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\r\n        state('enter', style({ transform: 'none' })),\r\n        transition('* => enter', group([\r\n            animate('{{enterAnimationDuration}} cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 })),\r\n            query('@*', animateChild(), { optional: true }),\r\n        ]), _defaultParams),\r\n        transition('* => void, * => exit', group([\r\n            animate('{{exitAnimationDuration}} cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 })),\r\n            query('@*', animateChild(), { optional: true }),\r\n        ]), _defaultParams),\r\n    ]),\r\n};\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, _MatDialogBase, _MatDialogContainerBase, _closeDialogVia, _defaultParams, matDialogAnimations };\r\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}