{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nexport class ConversationService {\n  constructor() {\n    this.conversations = [];\n    this.conversationParticipants = {};\n  }\n  getConversations() {\n    return this.conversations;\n  }\n  addConversation(conversation) {\n    const existingConversation = this.conversations.find(c => c.from === conversation.from && c.usernames[0] === conversation.usernames[0]);\n    // Si la conversation n'existe pas, ajoutez-la\n    if (!existingConversation) {\n      this.conversations.push(conversation);\n      this.conversationParticipants[conversation.id] = [{\n        login: conversation.from\n      }, {\n        login: conversation.usernames[0]\n      }];\n    } else {\n      // Si la conversation existe déjà, vous pouvez choisir de gérer cette situation comme vous le souhaitez\n      // Par exemple, afficher un message d'erreur ou ne rien faire.\n      console.log('La conversation existe déjà dans la liste.');\n    }\n  }\n}\n_class = ConversationService;\n_class.ɵfac = function ConversationService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["ConversationService","constructor","conversations","conversationParticipants","getConversations","addConversation","conversation","existingConversation","find","c","from","usernames","push","id","login","console","log","factory","ɵfac","providedIn"],"sources":["C:\\Users\\nohad\\OneDrive\\Documents\\INFO_4\\CPOO\\cpoo-menfaa-doaif\\cpoo-menfaa-doaif-version-pr-finale4\\client\\src\\app\\services\\ConversationService.ts"],"sourcesContent":["// conversation.service.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { Conversation2 } from '../Conversation2';\r\nimport { UserProfile } from '../user-profile.model';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n    })\r\n    export class ConversationService {\r\n    public conversations: Conversation2[]=[];\r\n    conversationParticipants: { [conversationId: string]: UserProfile[] } = {};\r\n\r\n    getConversations() {\r\n        return this.conversations;\r\n    }\r\n\r\n    addConversation(conversation: Conversation2) {\r\n        const existingConversation = this.conversations.find(c => (c.from === conversation.from && c.usernames[0]=== conversation.usernames[0]));\r\n\r\n        // Si la conversation n'existe pas, ajoutez-la\r\n        if (!existingConversation) {\r\n            this.conversations.push(conversation);\r\n            this.conversationParticipants[conversation.id] = [{ login: conversation.from }, { login: conversation.usernames[0] }];\r\n        } else {\r\n          // Si la conversation existe déjà, vous pouvez choisir de gérer cette situation comme vous le souhaitez\r\n          // Par exemple, afficher un message d'erreur ou ne rien faire.\r\n            console.log('La conversation existe déjà dans la liste.');\r\n        }\r\n    }\r\n    }\r\n"],"mappings":";;AAQI,OAAM,MAAOA,mBAAmB;EAHpCC,YAAA;IAIW,KAAAC,aAAa,GAAkB,EAAE;IACxC,KAAAC,wBAAwB,GAAgD,EAAE;;EAE1EC,gBAAgBA,CAAA;IACZ,OAAO,IAAI,CAACF,aAAa;EAC7B;EAEAG,eAAeA,CAACC,YAA2B;IACvC,MAAMC,oBAAoB,GAAG,IAAI,CAACL,aAAa,CAACM,IAAI,CAACC,CAAC,IAAKA,CAAC,CAACC,IAAI,KAAKJ,YAAY,CAACI,IAAI,IAAID,CAAC,CAACE,SAAS,CAAC,CAAC,CAAC,KAAIL,YAAY,CAACK,SAAS,CAAC,CAAC,CAAE,CAAC;IAExI;IACA,IAAI,CAACJ,oBAAoB,EAAE;MACvB,IAAI,CAACL,aAAa,CAACU,IAAI,CAACN,YAAY,CAAC;MACrC,IAAI,CAACH,wBAAwB,CAACG,YAAY,CAACO,EAAE,CAAC,GAAG,CAAC;QAAEC,KAAK,EAAER,YAAY,CAACI;MAAI,CAAE,EAAE;QAAEI,KAAK,EAAER,YAAY,CAACK,SAAS,CAAC,CAAC;MAAC,CAAE,CAAC;KACxH,MAAM;MACL;MACA;MACEI,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;;EAEjE;;SApBahB,mBAAmB;;mBAAnBA,MAAmB;AAAA;;SAAnBA,MAAmB;EAAAiB,OAAA,EAAnBjB,MAAmB,CAAAkB,IAAA;EAAAC,UAAA,EAFpB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}